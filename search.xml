<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>工作技巧</title>
    <url>/posts/a6eed33.html</url>
    <content><![CDATA[<h3 id="减少嵌套-if…else-或-switch-case，简单地使用基本的逻辑运算符AND-x2F-OR。"><a href="#减少嵌套-if…else-或-switch-case，简单地使用基本的逻辑运算符AND-x2F-OR。" class="headerlink" title="减少嵌套 if…else 或 switch case，简单地使用基本的逻辑运算符AND&#x2F;OR。"></a>减少嵌套 if…else 或 switch case，简单地使用基本的逻辑运算符AND&#x2F;OR。</h3><pre class="highlight"><code class="hljs javascript"><span class="hljs-comment">// 与 if (foo == 10) then console.log(&#x27;进入判断了&#x27;) 相同 // 输出: 进入判断了 </span><br><span class="hljs-keyword">let</span> foo = <span class="hljs-number">10</span>; foo === <span class="hljs-number">10</span> &amp;&amp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;进入判断了&#x27;</span>)  <br><span class="hljs-comment">// 与 if (foo != 5) then console.log(&#x27;进入判断了&#x27;) 相同 // 输出: 进入判断了</span><br>foo === <span class="hljs-number">5</span> || <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;进入判断了&#x27;</span>) <br></code></pre>
<h3 id="Rest（剩余）-amp-Spread-（扩展）运算符-…的两种意义"><a href="#Rest（剩余）-amp-Spread-（扩展）运算符-…的两种意义" class="headerlink" title="Rest（剩余） &amp; Spread （扩展）运算符(…的两种意义)"></a>Rest（剩余） &amp; Spread （扩展）运算符(…的两种意义)</h3><pre class="highlight"><code class="hljs javascript"><span class="hljs-comment">//示例1  方法结构传参</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">spread</span>(<span class="hljs-params">arg1, arg2, arg3</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arg1);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arg2);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arg3);<br>&#125;<br><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-title function_">spread</span>(...arr);<br><br><span class="hljs-comment">//示例2  合并数组或者对象</span><br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-keyword">var</span> arr2 = [...arr1, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-keyword">var</span> obj1 = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;;<br><span class="hljs-keyword">var</span> obj2 = &#123; ...obj1, <span class="hljs-attr">d</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">e</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">f</span>: <span class="hljs-number">6</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2);<br></code></pre>
<pre class="highlight"><code class="hljs javascript"><span class="hljs-comment">// 示例1 当函数参数个数不确定时</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">rest1</span>(<span class="hljs-params">...arr</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> arr) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>    &#125;<br>&#125;<br><span class="hljs-title function_">rest1</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br><br><span class="hljs-comment">//示例2 当确定其中几个,后续未知</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">rest2</span>(<span class="hljs-params">item, ...arr</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);<br>&#125;<br><span class="hljs-title function_">rest2</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br><br><span class="hljs-comment">//示例3 rest运算符配合 解构使用：</span><br><span class="hljs-keyword">var</span> [a, ...temp] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(temp);<br><br></code></pre>
<h3 id="开发技巧"><a href="#开发技巧" class="headerlink" title="开发技巧"></a>开发技巧</h3><p>尽量在开发中面向接口开发，而不是为了任务去拼凑代码从而将代码开发成了面向实现开发。</p>
<h3 id="自定义边框虚线"><a href="#自定义边框虚线" class="headerlink" title="自定义边框虚线"></a>自定义边框虚线</h3><pre class="highlight"><code class="hljs css">// 一条直的虚线<br><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(to bottom, <span class="hljs-number">#3A75FF</span> <span class="hljs-number">0%</span>, <span class="hljs-number">#3A75FF</span> <span class="hljs-number">80%</span>, transparent <span class="hljs-number">50%</span>);<br><span class="hljs-attribute">background-size</span>: <span class="hljs-number">3px</span> <span class="hljs-number">18px</span>;<br><span class="hljs-attribute">background-repeat</span>: y-repeat;<br>// 边框虚线<br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">90deg</span>, <span class="hljs-number">#3A75FF</span> <span class="hljs-number">50%</span>, transparent <span class="hljs-number">0</span>) repeat-x, <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">90deg</span>, <span class="hljs-number">#3A75FF</span> <span class="hljs-number">50%</span>, transparent <span class="hljs-number">0</span>) repeat-x, <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">0deg</span>, <span class="hljs-number">#3A75FF</span> <span class="hljs-number">50%</span>, transparent <span class="hljs-number">0</span>) repeat-y, <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">0deg</span>, <span class="hljs-number">#3A75FF</span> <span class="hljs-number">50%</span>, transparent <span class="hljs-number">0</span>) repeat-y;<br><span class="hljs-attribute">background-size</span>: <span class="hljs-number">8px</span> <span class="hljs-number">2px</span>, <span class="hljs-number">8px</span> <span class="hljs-number">2px</span>, <span class="hljs-number">2px</span> <span class="hljs-number">8px</span>, <span class="hljs-number">2px</span> <span class="hljs-number">8px</span>;<br><span class="hljs-attribute">background-position</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span>, <span class="hljs-number">0</span> <span class="hljs-number">100%</span>, <span class="hljs-number">0</span> <span class="hljs-number">0</span>, <span class="hljs-number">100%</span> <span class="hljs-number">0</span>;<br></code></pre>
<h3 id="项目整体置灰"><a href="#项目整体置灰" class="headerlink" title="项目整体置灰"></a>项目整体置灰</h3><p>为应对各种哀悼日将项目整体置灰</p>
<pre class="highlight"><code class="hljs css"><span class="hljs-selector-tag">body</span>,<span class="hljs-selector-tag">html</span>&#123;<br>  <span class="hljs-attribute">filter</span>: progid:DXImageTransform.Microsoft.<span class="hljs-built_in">BasicImage</span>(graysale=<span class="hljs-number">1</span>); //针对IE浏览器 <br>  -webkit-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">100%</span>);<br>&#125;<br></code></pre>
<h3 id="video部分浏览器出现边框问题"><a href="#video部分浏览器出现边框问题" class="headerlink" title="video部分浏览器出现边框问题"></a>video部分浏览器出现边框问题</h3><p>对边框进行设置mask-image</p>
]]></content>
  </entry>
  <entry>
    <title>flutter从无到有</title>
    <url>/posts/c874a042.html</url>
    <content><![CDATA[<h2 id="第一步：搭建环境"><a href="#第一步：搭建环境" class="headerlink" title="第一步：搭建环境"></a>第一步：搭建环境</h2><p>在开始搭建第一个Flutter应用之前，还需要在电脑里安装Flutter环境，如果还未搭建环境请先移步<a href="https://www.liyueer.cn/posts/662afcd5.html">这里</a>。如果环境已安装完毕，那就可以开始，</p>
<h2 id="第二步：创建应用"><a href="#第二步：创建应用" class="headerlink" title="第二步：创建应用"></a>第二步：创建应用</h2><p>首先找到即将使用的文件夹并在当前文件夹打开命令行 flutter create 项目名称如图一<br><img src="https://cdn.nlark.com/yuque/0/2023/png/28427234/1680708104712-92eb1747-4eab-4fcd-917a-65a4a7d0683e.png#averageHue=%23f7f7f6&clientId=u030161f4-ca59-4&from=paste&height=310&id=u64205e39&name=image.png&originHeight=1234&originWidth=1058&originalType=binary&ratio=2&rotation=0&showTitle=true&size=579264&status=done&style=none&taskId=u9eef0d84-da7a-4b88-a25e-b2305e0e31e&title=%E5%9B%BE%E4%B8%80&width=266" alt="image.png" title="图一" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.nlark.com/yuque/0/2023/png/28427234/1680708104712-92eb1747-4eab-4fcd-917a-65a4a7d0683e.png#averageHue=%23f7f7f6&clientId=u030161f4-ca59-4&from=paste&height=310&id=u64205e39&name=image.png&originHeight=1234&originWidth=1058&originalType=binary&ratio=2&rotation=0&showTitle=true&size=579264&status=done&style=none&taskId=u9eef0d84-da7a-4b88-a25e-b2305e0e31e&title=%E5%9B%BE%E4%B8%80&width=266" class="lozad post-image"><img src="https://cdn.nlark.com/yuque/0/2023/png/28427234/1680708294450-ddc597fe-d5b2-40ad-826b-ab6ded77156e.png#averageHue=%23f9f9f9&clientId=u030161f4-ca59-4&from=paste&height=309&id=ud59f23fa&name=image.png&originHeight=1770&originWidth=978&originalType=binary&ratio=2&rotation=0&showTitle=true&size=72673&status=done&style=none&taskId=ud9923ad5-b863-4f18-87b8-aca1906af32&title=%E5%9B%BE%E4%BA%8C&width=171" alt="image.png" title="图二" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.nlark.com/yuque/0/2023/png/28427234/1680708294450-ddc597fe-d5b2-40ad-826b-ab6ded77156e.png#averageHue=%23f9f9f9&clientId=u030161f4-ca59-4&from=paste&height=309&id=ud59f23fa&name=image.png&originHeight=1770&originWidth=978&originalType=binary&ratio=2&rotation=0&showTitle=true&size=72673&status=done&style=none&taskId=ud9923ad5-b863-4f18-87b8-aca1906af32&title=%E5%9B%BE%E4%BA%8C&width=171" class="lozad post-image"><br>创建完成后按照下面的命令执行即可进入该项目中运行如图二</p>
<h2 id="第三步：了解文件"><a href="#第三步：了解文件" class="headerlink" title="第三步：了解文件"></a>第三步：了解文件</h2><p>完成到这里就可以开始后面定制化的开发了，再次之前可以对每个文件夹进行介绍一下，方便后期开发<br><img src="https://cdn.nlark.com/yuque/0/2023/png/28427234/1680708461836-b8574456-a03d-4354-9c93-18345e8b421d.png#averageHue=%2325272a&clientId=u030161f4-ca59-4&from=paste&height=407&id=uf888b3d3&name=image.png&originHeight=814&originWidth=568&originalType=binary&ratio=2&rotation=0&showTitle=false&size=66414&status=done&style=none&taskId=u5ad4a3c6-9cea-4792-befd-9dbd921fdd7&title=&width=284" alt="image.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.nlark.com/yuque/0/2023/png/28427234/1680708461836-b8574456-a03d-4354-9c93-18345e8b421d.png#averageHue=%2325272a&clientId=u030161f4-ca59-4&from=paste&height=407&id=uf888b3d3&name=image.png&originHeight=814&originWidth=568&originalType=binary&ratio=2&rotation=0&showTitle=false&size=66414&status=done&style=none&taskId=u5ad4a3c6-9cea-4792-befd-9dbd921fdd7&title=&width=284" class="lozad post-image"></p>
<h3 id="pubspec-yaml"><a href="#pubspec-yaml" class="headerlink" title="pubspec.yaml"></a>pubspec.yaml</h3><h3 id="pubspec-lock"><a href="#pubspec-lock" class="headerlink" title="pubspec.lock"></a>pubspec.lock</h3><p>与vue一样，是依赖版本锁</p>
<h3 id="ios-x2F-android-x2F-web-x2F-windows-x2F-macos-x2F-linux"><a href="#ios-x2F-android-x2F-web-x2F-windows-x2F-macos-x2F-linux" class="headerlink" title="ios&#x2F;android&#x2F;web&#x2F;windows&#x2F;macos&#x2F;linux"></a>ios&#x2F;android&#x2F;web&#x2F;windows&#x2F;macos&#x2F;linux</h3><p>对应的不同平台所内置的引擎能力,作为一名前端人员就可以看Web，这里面就有一个html模版，里面通过js将dart代码动态加载并渲染。</p>
<h3 id="lib"><a href="#lib" class="headerlink" title="lib"></a>lib</h3><p>这里面就是主要开发文件夹，可以在这里创建自己的开发文件，其中main.dart就是主入口文件，</p>
<h2 id="第四步：Flutter-架构概览"><a href="#第四步：Flutter-架构概览" class="headerlink" title="第四步：Flutter 架构概览"></a>第四步：Flutter 架构概览</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/28427234/1680712075341-3afb5769-fb57-47be-8d06-74f8709bc4b9.png#averageHue=%2367b567&clientId=u030161f4-ca59-4&from=paste&id=u8a9d8ae4&name=image.png&originHeight=1506&originWidth=1836&originalType=url&ratio=2&rotation=0&showTitle=false&size=802610&status=done&style=none&taskId=u8363cc05-59ef-4c25-bed7-1ffe9bbeb57&title=" alt="image.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.nlark.com/yuque/0/2023/png/28427234/1680712075341-3afb5769-fb57-47be-8d06-74f8709bc4b9.png#averageHue=%2367b567&clientId=u030161f4-ca59-4&from=paste&id=u8a9d8ae4&name=image.png&originHeight=1506&originWidth=1836&originalType=url&ratio=2&rotation=0&showTitle=false&size=802610&status=done&style=none&taskId=u8363cc05-59ef-4c25-bed7-1ffe9bbeb57&title=" class="lozad post-image"></p>
<h3 id="Framework框架层"><a href="#Framework框架层" class="headerlink" title="Framework框架层"></a>Framework框架层</h3><p>纯dart语言写成的SDK，实现了一套基础库，其中Foundation、Animation、Painting、Gestures都是Google实现的UI、动画渲染、手势交互层面的基础库，Rendering是渲染层，纯抽象布局的一部分，依赖于Foundation、Animation、Painting、Gestures。在这里将会形成一个可渲染对象组成的渲染树，当渲染内容发生变化，这里就会找出变化的内容进行更新，与vue的Render大同小异。Widgets就是Flutter内置的基础组件库。而Material和Cupertinno则是两套不同风格的具体组件库，在开发工程中就回去引用其中的包，如mai.dart中第一行就引用了import ‘package:flutter&#x2F;material.dart’</p>
<h3 id="Engine引擎层"><a href="#Engine引擎层" class="headerlink" title="Engine引擎层"></a>Engine引擎层</h3><p>对 Flutter 的核心 API 进行了底层封装并将功能暴露给框架层这里就是Flutter根据不同应用渲染出结果、调用不同平台的原生基础能力，都是通过这里进行总装，通过调用不同内容进行分发调用。</p>
<h3 id="Embrdder嵌入层"><a href="#Embrdder嵌入层" class="headerlink" title="Embrdder嵌入层"></a>Embrdder嵌入层</h3><p>与平台进行整合，将Flutter引擎嵌入对应平台，因为各平台使用的底层语言不同，这里就会产生对应适配，这样Flutter才可以正常渲染。这是Flutter实现跨平台最为核心的一个地方。如果需要对接新平台也将是在这里增加一套新嵌入层。</p>
<h2 id="第五步：语言介绍"><a href="#第五步：语言介绍" class="headerlink" title="第五步：语言介绍"></a>第五步：语言介绍</h2><p>常用如下：</p>
<h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>使用var声明变量、使用const声明常量、可以Object声明一个对象，与TS比较像</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><pre class="highlight"><code class="hljs bash">//无参数类型-这是不带函数参数或者说参数列表为空<br>String getDefaultErrorMsg() =&gt; <span class="hljs-string">&#x27;Unknown Error!&#x27;</span>;<br>//无参数类型-等价于上面函数形式，同样是参数列表为空<br>get getDefaultErrorMsg =&gt; <span class="hljs-string">&#x27;Unknown Error!&#x27;</span>;<br>//必需位置参数类型-这里的exception是必需的位置参数<br>String getErrorMsg(Exception exception) =&gt; exception.toString();<br>//必需位置参数类型-这里的exception是必需的位置参数<br>String getErrorMsg(Exception exception) =&gt; exception.toString();<br>//必需位置参数类型-这里的exception是必需的位置参数<br>String getErrorMsg(Exception exception) =&gt; exception.toString();<br>//必需位置参数类型-这里的exception是必需的位置参数<br>String getErrorMsg(Exception exception) =&gt; exception.toString();<br>//注意: 可选命名参数必须在必需位置参数的后面<br>num add(num a, num b, &#123;num c, num d&#125;) &#123;<br>   <span class="hljs-built_in">return</span> a + b + c + d;<br>&#125;<br>void add7([num a, num b], &#123;num c, num d&#125;) &#123;<br>	// todo<br>&#125;<br>参数默认值(参数默认值只针对可选参数才能添加的。)<br>num add(num a, num b, num c,&#123; num d = 5 &#125;, [num e = 5]&#125;) &#123;<br>    <span class="hljs-built_in">return</span> a + b + c + d;<br>&#125;<br></code></pre>
<h3 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h3><p>mixin 可以实现类似多重继承的功能，但是实际上和多重继承又不一样。多重继承中相同的函数执行并不会存在 ”父子“ 关系，mixin还可以抽象和重用一系列特性，mixin实际上实现了一条继承链声明，mixin 的顺序代表了继承链的继承顺序，声明在后面的 mixin，一般会最先执行</p>
<h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>Future使用Future对象封装了Dart 的异步操作，在定义时进行声明即可，开箱即用。</p>
<h3 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h3><p>Stream 是一系列异步事件的序列。其类似于一个异步的 Iterable，不同的是当你向 Iterable 获取下一个事件时它会立即给你，但是 Stream 则不会立即给你而是在它准备好时告诉你。Stream 提供一个异步的数据序列。数据序列包括用户生成的事件和从文件读取的数据。你可以使用 Stream API 中的 listen() 方法和 await for 关键字来处理一个 Stream。当出现错误时，Stream 提供一种处理错误的方式。Stream 有两种类型：Single-Subscription 和 Broadcast</p>
<h3 id="安利"><a href="#安利" class="headerlink" title="安利"></a>安利</h3><p>为了减少学习成本，这里推荐一下<a href="https://openkraken.com/guide">Kraken</a>，使用它就是做了个桥接层，让我们使用前端技术进行Flutter开发了。</p>
<h2 id="第四步：实战"><a href="#第四步：实战" class="headerlink" title="第四步：实战"></a>第四步：实战</h2><p> 、</p>
<p>因为Flutter本就是支持多运用的，因此本次案例选择Chrome来运行查看效果，这样可以快速的运行并查看效果。Flutter是支持热更新的，但是在第一次使用VScode开发Flutter时，有可能VScode可能配置并没有开启，因此需要再设置中进行配置并重载，如图1，再次运行后就可以支持Flutter的热更新了。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/28427234/1680795305231-7fc77ac5-6890-4e33-a8cb-0c49ed5a4bcd.png#averageHue=%232b2b2b&clientId=ud048ed5b-f283-4&from=paste&height=334&id=ud008bf8a&name=image.png&originHeight=912&originWidth=1092&originalType=binary&ratio=2&rotation=0&showTitle=false&size=120205&status=done&style=none&taskId=ue6fc0743-d9b2-4196-9e2b-6d5e103e4df&title=&width=400" alt="image.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.nlark.com/yuque/0/2023/png/28427234/1680795305231-7fc77ac5-6890-4e33-a8cb-0c49ed5a4bcd.png#averageHue=%232b2b2b&clientId=ud048ed5b-f283-4&from=paste&height=334&id=ud008bf8a&name=image.png&originHeight=912&originWidth=1092&originalType=binary&ratio=2&rotation=0&showTitle=false&size=120205&status=done&style=none&taskId=ue6fc0743-d9b2-4196-9e2b-6d5e103e4df&title=&width=400" class="lozad post-image"><br>开始码代码，下面是lib下main.dart的代码我在下面进行注释，大致了解一下这里每一个方法的作用</p>
<pre class="highlight"><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123; <span class="hljs-comment">// main函数就是入口函数</span><br>  runApp(<span class="hljs-keyword">const</span> MyApp()); <span class="hljs-comment">// MyApp 这里就是下面创建的根组件，runApp就是flutter程序入口，传入的Widget即是我们需要显示的界面Widget，widget就类似于前端的组件</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123; <span class="hljs-comment">// MyApp继承了无状态的Widget，表示是纯UI组件</span><br>  <span class="hljs-keyword">const</span> MyApp(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-comment">// This widget is the root of your application.</span><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123; <span class="hljs-comment">// build 就相当于Render函数</span><br>    <span class="hljs-keyword">return</span> MaterialApp( <span class="hljs-comment">// 表述整个页面的布局</span><br>      title: <span class="hljs-string">&#x27;Flutter Demo&#x27;</span>, <span class="hljs-comment">// 这里就是APP名称</span><br>      theme: ThemeData( <span class="hljs-comment">// 使用主题</span><br>        <span class="hljs-comment">// This is the theme of your application.</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// Try running your application with &quot;flutter run&quot;. You&#x27;ll see the</span><br>        <span class="hljs-comment">// application has a blue toolbar. Then, without quitting the app, try</span><br>        <span class="hljs-comment">// changing the primarySwatch below to Colors.green and then invoke</span><br>        <span class="hljs-comment">// &quot;hot reload&quot; (press &quot;r&quot; in the console where you ran &quot;flutter run&quot;,</span><br>        <span class="hljs-comment">// or simply save your changes to &quot;hot reload&quot; in a Flutter IDE).</span><br>        <span class="hljs-comment">// Notice that the counter didn&#x27;t reset back to zero; the application</span><br>        <span class="hljs-comment">// is not restarted.</span><br>        primarySwatch: Colors.blue, <span class="hljs-comment">// 主题颜色是蓝色</span><br>      ),<br>      home: <span class="hljs-keyword">const</span> MyHomePage(title: <span class="hljs-string">&#x27;Frist Flutter!&#x27;</span>), <span class="hljs-comment">// 内容区域 这里定义了一个MyHomePage的类传参为title 这一块就是图1里面的内容</span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHomePage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123; <span class="hljs-comment">// 创建MyHomePageWidget，继承与有状态Widget</span><br>  <span class="hljs-keyword">const</span> MyHomePage(&#123;<span class="hljs-keyword">super</span>.key, <span class="hljs-keyword">required</span> <span class="hljs-keyword">this</span>.title&#125;); <span class="hljs-comment">// 接收参数 required表示必传，</span><br><br>  <span class="hljs-comment">// This widget is the home page of your application. It is stateful, meaning</span><br>  <span class="hljs-comment">// that it has a State object (defined below) that contains fields that affect</span><br>  <span class="hljs-comment">// how it looks.</span><br><br>  <span class="hljs-comment">// This class is the configuration for the state. It holds the values (in this</span><br>  <span class="hljs-comment">// case the title) provided by the parent (in this case the App widget) and</span><br>  <span class="hljs-comment">// used by the build method of the State. Fields in a Widget subclass are</span><br>  <span class="hljs-comment">// always marked &quot;final&quot;.</span><br><br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">String</span> title;<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;MyHomePage&gt; createState() =&gt; _MyHomePageState(); <span class="hljs-comment">// 创建一个state进行管理计数器部分</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_MyHomePageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">MyHomePage</span>&gt; </span>&#123;<br>  <span class="hljs-built_in">int</span> _counter = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">void</span> _incrementCounter() &#123; <span class="hljs-comment">// 定义一个方法</span><br>    setState(() &#123;<br>      <span class="hljs-comment">// This call to setState tells the Flutter framework that something has</span><br>      <span class="hljs-comment">// changed in this State, which causes it to rerun the build method below</span><br>      <span class="hljs-comment">// so that the display can reflect the updated values. If we changed</span><br>      <span class="hljs-comment">// _counter without calling setState(), then the build method would not be</span><br>      <span class="hljs-comment">// called again, and so nothing would appear to happen.</span><br>      _counter++;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-comment">// This method is rerun every time setState is called, for instance as done</span><br>    <span class="hljs-comment">// by the _incrementCounter method above.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// The Flutter framework has been optimized to make rerunning build methods</span><br>    <span class="hljs-comment">// fast, so that you can just rebuild anything that needs updating rather</span><br>    <span class="hljs-comment">// than having to individually change instances of widgets.</span><br>    <span class="hljs-keyword">return</span> Scaffold( <span class="hljs-comment">// 表示是一个容器</span><br>      appBar: AppBar( <span class="hljs-comment">// 这里创建一个头部，如图3</span><br>        <span class="hljs-comment">// Here we take the value from the MyHomePage object that was created by</span><br>        <span class="hljs-comment">// the App.build method, and use it to set our appbar title.</span><br>        title: Text(widget.title),<br>      ),<br>      body: Center( <span class="hljs-comment">// 这里表述body是一个用居中容器包裹的，只能接受一个组件，放在child上</span><br>        <span class="hljs-comment">// Center is a layout widget. It takes a single child and positions it</span><br>        <span class="hljs-comment">// in the middle of the parent.</span><br>        child: Column( <span class="hljs-comment">// 创建一行，可以接受多个组件，放在children中</span><br>          <span class="hljs-comment">// Column is also a layout widget. It takes a list of children and</span><br>          <span class="hljs-comment">// arranges them vertically. By default, it sizes itself to fit its</span><br>          <span class="hljs-comment">// children horizontally, and tries to be as tall as its parent.</span><br>          <span class="hljs-comment">//</span><br>          <span class="hljs-comment">// Invoke &quot;debug painting&quot; (press &quot;p&quot; in the console, choose the</span><br>          <span class="hljs-comment">// &quot;Toggle Debug Paint&quot; action from the Flutter Inspector in Android</span><br>          <span class="hljs-comment">// Studio, or the &quot;Toggle Debug Paint&quot; command in Visual Studio Code)</span><br>          <span class="hljs-comment">// to see the wireframe for each widget.</span><br>          <span class="hljs-comment">//</span><br>          <span class="hljs-comment">// Column has various properties to control how it sizes itself and</span><br>          <span class="hljs-comment">// how it positions its children. Here we use mainAxisAlignment to</span><br>          <span class="hljs-comment">// center the children vertically; the main axis here is the vertical</span><br>          <span class="hljs-comment">// axis because Columns are vertical (the cross axis would be</span><br>          <span class="hljs-comment">// horizontal).</span><br>          mainAxisAlignment: MainAxisAlignment.center, <span class="hljs-comment">// 纵向排列方式，这里使用的是居中</span><br>          children: &lt;Widget&gt;[ <span class="hljs-comment">// 表示这个数组是一个组件数组</span><br>            <span class="hljs-keyword">const</span> Text( <span class="hljs-comment">// 这是创建一个文本</span><br>              <span class="hljs-string">&#x27;You have pushed the button this many times:&#x27;</span>,<br>            ),<br>            Text( <span class="hljs-comment">//</span><br>              <span class="hljs-string">&#x27;<span class="hljs-subst">$_counter</span>&#x27;</span>, <span class="hljs-comment">// 使用$ 接受一个变量</span><br>              style: Theme.of(context).textTheme.headlineMedium, <span class="hljs-comment">// 设置文本样式</span><br>            ),<br>          ],<br>        ),<br>      ),<br>      floatingActionButton: FloatingActionButton( <span class="hljs-comment">// 创建一个浮动的按钮</span><br>        onPressed: _incrementCounter, <span class="hljs-comment">// 相当于点击事件，</span><br>        tooltip: <span class="hljs-string">&#x27;Increment&#x27;</span>, <span class="hljs-comment">// 长按提示内容，Web中效果是鼠标移入提示</span><br>        child: <span class="hljs-keyword">const</span> Icon(Icons.add), <span class="hljs-comment">// 按钮接受一个组件 这里直接创建一个icon </span><br>      ), <span class="hljs-comment">// This trailing comma makes auto-formatting nicer for build methods.</span><br>    );<br>  &#125;<br>&#125;<br><br></code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/28427234/1680797189832-3008d7ff-d51d-4fb4-8033-14f72a97853d.png#averageHue=%23f9f9f9&clientId=ud048ed5b-f283-4&from=paste&height=539&id=u319b5719&name=image.png&originHeight=1634&originWidth=1000&originalType=binary&ratio=2&rotation=0&showTitle=true&size=72044&status=done&style=none&taskId=u1e0b7762-65f5-428d-91b4-f0e8c2a0561&title=%E5%9B%BE2&width=330" alt="image.png" title="图2" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.nlark.com/yuque/0/2023/png/28427234/1680797189832-3008d7ff-d51d-4fb4-8033-14f72a97853d.png#averageHue=%23f9f9f9&clientId=ud048ed5b-f283-4&from=paste&height=539&id=u319b5719&name=image.png&originHeight=1634&originWidth=1000&originalType=binary&ratio=2&rotation=0&showTitle=true&size=72044&status=done&style=none&taskId=u1e0b7762-65f5-428d-91b4-f0e8c2a0561&title=%E5%9B%BE2&width=330" class="lozad post-image"><img src="https://cdn.nlark.com/yuque/0/2023/png/28427234/1680797282733-488adf78-b680-4df1-b9cf-633e8069f9dd.png#averageHue=%234c95ea&clientId=ud048ed5b-f283-4&from=paste&height=38&id=uac0680a5&name=image.png&originHeight=124&originWidth=998&originalType=binary&ratio=2&rotation=0&showTitle=true&size=17024&status=done&style=none&taskId=u78c2b95d-0218-4f9b-aba6-b197466a9b4&title=%E5%9B%BE3&width=307" alt="image.png" title="图3" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.nlark.com/yuque/0/2023/png/28427234/1680797282733-488adf78-b680-4df1-b9cf-633e8069f9dd.png#averageHue=%234c95ea&clientId=ud048ed5b-f283-4&from=paste&height=38&id=uac0680a5&name=image.png&originHeight=124&originWidth=998&originalType=binary&ratio=2&rotation=0&showTitle=true&size=17024&status=done&style=none&taskId=u78c2b95d-0218-4f9b-aba6-b197466a9b4&title=%E5%9B%BE3&width=307" class="lozad post-image"><img src="https://cdn.nlark.com/yuque/0/2023/png/28427234/1680796241953-b7ad9626-86e2-4764-bfe2-9ab7d5e20efe.png#averageHue=%23f9f9f9&clientId=ud048ed5b-f283-4&from=paste&height=437&id=u128c34ab&name=image.png&originHeight=1678&originWidth=1262&originalType=binary&ratio=2&rotation=0&showTitle=true&size=65846&status=done&style=none&taskId=uf3cc3987-3156-4cd3-9c75-70c559f2eae&title=%E5%9B%BE4&width=329" alt="image.png" title="图4" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.nlark.com/yuque/0/2023/png/28427234/1680796241953-b7ad9626-86e2-4764-bfe2-9ab7d5e20efe.png#averageHue=%23f9f9f9&clientId=ud048ed5b-f283-4&from=paste&height=437&id=u128c34ab&name=image.png&originHeight=1678&originWidth=1262&originalType=binary&ratio=2&rotation=0&showTitle=true&size=65846&status=done&style=none&taskId=uf3cc3987-3156-4cd3-9c75-70c559f2eae&title=%E5%9B%BE4&width=329" class="lozad post-image"><img src="https://cdn.nlark.com/yuque/0/2023/png/28427234/1680796279220-220654c9-6850-4085-a322-ddffcfbc9871.png#averageHue=%23f7f7f7&clientId=ud048ed5b-f283-4&from=paste&height=195&id=u9767b814&name=image.png&originHeight=246&originWidth=222&originalType=binary&ratio=2&rotation=0&showTitle=true&size=13520&status=done&style=none&taskId=u8cf6b6e5-482c-4852-8ef1-70e402a7df9&title=%E5%9B%BE5&width=176" alt="image.png" title="图5" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.nlark.com/yuque/0/2023/png/28427234/1680796279220-220654c9-6850-4085-a322-ddffcfbc9871.png#averageHue=%23f7f7f7&clientId=ud048ed5b-f283-4&from=paste&height=195&id=u9767b814&name=image.png&originHeight=246&originWidth=222&originalType=binary&ratio=2&rotation=0&showTitle=true&size=13520&status=done&style=none&taskId=u8cf6b6e5-482c-4852-8ef1-70e402a7df9&title=%E5%9B%BE5&width=176" class="lozad post-image"><br>在上面的代码中，可以看到flutter就是一个一个的组件堆积而成，基于函数式声明式的开发的有一定的开发基础都可以进行开发，这里面比较难得就是需要知道flutter都提供了那些组件以及组件都需要那些参数、作用都是什么，只要了解了这些flutter开发就不在有任何难度，上面提供了flutter的社区链接和开发文档链接，看完有助于开发。<br>了解完后，看到flutter基于函数式声明式的开发的，跟前端开始有一定差异，那动起手来，多加练习来适应这种开发形式。那就开始开发一些自己页面，只有动手才能加深自己印象，加快学习进度。<br>以下是本次练习的主要代码</p>
<h3 id="主入口"><a href="#主入口" class="headerlink" title="主入口"></a>主入口</h3><pre class="highlight"><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_news/constants/Constants.dart&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;events/ThemeEvent.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;pages/HomePage.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() =&gt; runApp(FlutterNews());<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlutterNews</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  _FlutterNewsState createState() =&gt; _FlutterNewsState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_FlutterNewsState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">FlutterNews</span>&gt; </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> initState() &#123;<br>    <span class="hljs-keyword">super</span>.initState();<br>    Constants.eventBus.<span class="hljs-keyword">on</span>&lt;ThemeEvent&gt;().listen((event) &#123;<br>      setState(() &#123;<br>        Constants.currentTheme = event.themeModel;<br>      &#125;);<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">var</span> theme = Constants.currentTheme == Constants.dayTheme<br>        ? ThemeData(<br>            brightness: Brightness.light,<br>            primaryColor: Colors.blue,<br>          )<br>        : ThemeData(<br>            brightness: Brightness.dark,<br>            primaryColor: Colors.black,<br>          );<br><br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      debugShowCheckedModeBanner: <span class="hljs-keyword">false</span>,<br>      theme: theme,<br>      home: HomePage(),<br>    );<br>  &#125;<br>&#125;<br><br></code></pre>
<h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><pre class="highlight"><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:convert&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_news/constants/Constants.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_news/events/ThemeEvent.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_news/models/local/Channel.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_news/widgets/Newslistwidget.dart&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;aboutpage.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomePage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  HomePage(&#123;Key key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  _HomePageState createState() =&gt; _HomePageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_HomePageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">HomePage</span>&gt;</span><br><span class="hljs-class">    <span class="hljs-title">with</span> <span class="hljs-title">SingleTickerProviderStateMixin</span>, <span class="hljs-title">AutomaticKeepAliveClientMixin</span> </span>&#123;<br><span class="hljs-comment">//首页面所有数据的容器</span><br>  <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">dynamic</span>&gt; newsData;<br>  <span class="hljs-comment">//初始化频道数据的容器</span><br>  <span class="hljs-built_in">List</span>&lt;Channel&gt; channels;<br><br>  TabController _tabController;<br><br>  <span class="hljs-meta">@override</span><br>  initState() &#123;<br>    <span class="hljs-keyword">super</span>.initState();<br>    _initChannelData();<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  dispose() &#123;<br>    _tabController.dispose();<br>    <span class="hljs-keyword">super</span>.dispose();<br>  &#125;<br><br>  <span class="hljs-comment">//加载初始化json数据</span><br>  _initChannelData() &#123;<br>    channels = <span class="hljs-built_in">List</span>&lt;Channel&gt;();<br>    Future&lt;<span class="hljs-built_in">String</span>&gt; data =<br>        DefaultAssetBundle.of(context).loadString(<span class="hljs-string">&quot;assets/config/channel.json&quot;</span>);<br>    data.then((<span class="hljs-built_in">String</span> value) &#123;<br>      setState(() &#123;<br>        <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">dynamic</span>&gt; data = json.decode(value);<br>        _tabController = TabController(<br>          vsync: <span class="hljs-keyword">this</span>,<br>          length: data.length,<br>        );<br>        data.forEach((tmp) &#123;<br>          channels.add(Channel.fromJson(tmp));<br>        &#125;);<br>      &#125;);<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-comment">//初始化标题指示条</span><br>  Widget _initChannelTitle() &#123;<br>    <span class="hljs-keyword">return</span> TabBar(<br>        controller: _tabController,<br>        indicatorColor: Colors.blue[<span class="hljs-number">100</span>],<br>        tabs: channels.map((Channel channel) &#123;<br>          <span class="hljs-keyword">return</span> Tab(<br>            text: channel.channelName,<br>          );<br>        &#125;).toList());<br>  &#125;<br><br>  <span class="hljs-comment">//初始化列表内容</span><br>  Widget _initChannelList() &#123;<br>    <span class="hljs-keyword">return</span> TabBarView(<br>      controller: _tabController,<br>      children: channels.map((Channel channel) &#123;<br>        <span class="hljs-keyword">return</span> NewsListWidget(channel: channel);<br>      &#125;).toList(),<br>    );<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> DefaultTabController(<br>      length: channels.length,<br>      child: Scaffold(<br>        appBar: AppBar(<br>          leading: Icon(Icons.title),<br>          title: Text(Strings.appTitle, style: TextStyle(color: Colors.white)),<br>          bottom: _initChannelTitle(),<br>          actions: &lt;Widget&gt;[<br>            IconButton(<br>              icon: Icon(Icons.assignment),<br>              onPressed: (() &#123;<br>                Navigator.push(<br>                  context,<br>                  MaterialPageRoute(builder: (context) =&gt; AboutPage()),<br>                );<br>              &#125;),<br>            ),<br>            IconButton(<br>                icon: Icon(Icons.autorenew),<br>                onPressed: (() &#123;<br>                  Constants.eventBus.fire(<br>                      Constants.currentTheme == Constants.dayTheme<br>                          ? ThemeEvent(Constants.nightTheme)<br>                          : ThemeEvent(Constants.dayTheme));<br>                &#125;))<br>          ],<br>        ),<br>        body: _initChannelList(),<br>      ),<br>    );<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-built_in">bool</span> <span class="hljs-keyword">get</span> wantKeepAlive =&gt; <span class="hljs-keyword">true</span>;<br>&#125;<br><br></code></pre>

<h3 id="列表页面"><a href="#列表页面" class="headerlink" title="列表页面"></a>列表页面</h3><pre class="highlight"><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_news/api/Apis.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_news/events/BeanEvent.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_news/constants/Constants.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_news/models/local/Channel.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_news/models/network/NewsList.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_news/pages/NewsDetailPage.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewsListWidget</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-keyword">final</span> Channel channel;<br>  NewsListWidget(&#123;Key key, <span class="hljs-keyword">this</span>.channel&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  _NewsListState createState() =&gt; _NewsListState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_NewsListState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">NewsListWidget</span>&gt;</span><br><span class="hljs-class">    <span class="hljs-title">with</span> <span class="hljs-title">AutomaticKeepAliveClientMixin</span> </span>&#123;<br>  <span class="hljs-comment">//当前页</span><br>  <span class="hljs-built_in">int</span> _page = <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">//网络请求接口</span><br>  API$Neteast _api;<br>  <span class="hljs-comment">//该频道下的所有新闻数据</span><br>  <span class="hljs-built_in">List</span>&lt;News&gt; _datas;<br>  ScrollController _listController;<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-built_in">bool</span> <span class="hljs-keyword">get</span> wantKeepAlive =&gt; <span class="hljs-keyword">true</span>;<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> initState() &#123;<br>    <span class="hljs-keyword">super</span>.initState();<br>    _api = API$Neteast();<br>    _datas = [];<br>    _listController = ScrollController();<br>    _listController.addListener(() &#123;<br>      <span class="hljs-keyword">var</span> maxScroll = _listController.position.maxScrollExtent;<br>      <span class="hljs-keyword">var</span> pixels = _listController.position.pixels;<br>      <span class="hljs-keyword">if</span> (maxScroll == pixels) &#123;<br>        _page += <span class="hljs-number">20</span>;<br>        _getNewsList();<br>      &#125;<br>    &#125;);<br><br>    Constants.eventBus.<span class="hljs-keyword">on</span>&lt;BeanEvent&lt;NewsList&gt;&gt;().listen((event) &#123;<br>      <span class="hljs-keyword">if</span> (widget.channel.channelId == event.id) &#123;<br>        setState(() &#123;<br>          NewsList data = event.data;<br>          _datas.addAll(data.datas);<br>        &#125;);<br>      &#125;<br>    &#125;);<br>    _getNewsList();<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> dispose() &#123;<br>    _listController.dispose();<br>    <span class="hljs-keyword">super</span>.dispose();<br>  &#125;<br><br>  Future&lt;<span class="hljs-built_in">Null</span>&gt; _pullToRefresh() <span class="hljs-keyword">async</span> &#123;<br>    _page = <span class="hljs-number">0</span>;<br>    _datas.clear();<br>    _getNewsList();<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>  &#125;<br><br>  _getNewsList() &#123;<br>    _api.getNewsList(<br>        widget.channel.channelType, widget.channel.channelId, _page);<br>  &#125;<br><br>  _onItemClick(<span class="hljs-built_in">int</span> position, News data) &#123;<br>    <span class="hljs-keyword">if</span> (data.url == <span class="hljs-keyword">null</span> || data.url.isEmpty) &#123;<br>      Scaffold.of(context).showSnackBar(SnackBar(<br>        content: <span class="hljs-keyword">new</span> Text(<span class="hljs-string">&#x27;缺少新闻链接&#x27;</span>),<br>        duration: <span class="hljs-built_in">Duration</span>(seconds: <span class="hljs-number">1</span>),<br>      ));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      Navigator.of(context).push(MaterialPageRoute(<br>          builder: (ctx) =&gt; NewsDetailPage(<br>                postId: data.postid,<br>                url: data.url,<br>                title: <span class="hljs-string">&quot;&quot;</span>,<br>              )));<br>    &#125;<br>  &#125;<br><br>  Widget _renderRow(<span class="hljs-built_in">int</span> position) &#123;<br>    <span class="hljs-keyword">if</span> (position.isOdd) <span class="hljs-keyword">return</span> Divider();<br><br>    <span class="hljs-keyword">final</span> index = position ~/ <span class="hljs-number">2</span>;<br>    News data = _datas[index];<br><br>    <span class="hljs-keyword">return</span> Card(<br>      color: Colors.grey[<span class="hljs-number">250</span>],<br>      elevation: <span class="hljs-number">5.0</span>,<br>      child: InkWell(<br>        child: <span class="hljs-keyword">new</span> Column(<br>          crossAxisAlignment: CrossAxisAlignment.start,<br>          children: [<br>            Image.network(data.imgsrc, fit: BoxFit.fitWidth),<br>            Padding(<br>              padding: <span class="hljs-keyword">const</span> EdgeInsets.all(<span class="hljs-number">10.0</span>),<br>              child: Text(<br>                data.title,<br>                style: TextStyle(<br>                  fontSize: <span class="hljs-number">16.0</span>,<br>                  fontWeight: FontWeight.bold,<br>                ),<br>              ),<br>            ),<br>            Padding(<br>              padding: data.digest.isEmpty<br>                  ? <span class="hljs-keyword">const</span> EdgeInsets.all(<span class="hljs-number">0.0</span>)<br>                  : <span class="hljs-keyword">const</span> EdgeInsets.only(<br>                      left: <span class="hljs-number">10.0</span>, right: <span class="hljs-number">10.0</span>, bottom: <span class="hljs-number">10.0</span>),<br>              child: Text(<br>                data.digest,<br>                style: TextStyle(<br>                  fontSize: <span class="hljs-number">12.0</span>,<br>                ),<br>              ),<br>            ),<br>            Padding(<br>              padding: <span class="hljs-keyword">const</span> EdgeInsets.only(left: <span class="hljs-number">10.0</span>, right: <span class="hljs-number">10.0</span>),<br>              child: Text(<br>                <span class="hljs-string">&#x27;时间：<span class="hljs-subst">$&#123;data.ptime&#125;</span>&#x27;</span>,<br>                style: TextStyle(<br>                  fontSize: <span class="hljs-number">12.0</span>,<br>                ),<br>              ),<br>            ),<br>            Padding(<br>              padding:<br>                  <span class="hljs-keyword">const</span> EdgeInsets.only(left: <span class="hljs-number">10.0</span>, right: <span class="hljs-number">10.0</span>, bottom: <span class="hljs-number">10.0</span>),<br>              child: Text(<br>                <span class="hljs-string">&#x27;来源：<span class="hljs-subst">$&#123;data.source&#125;</span>&#x27;</span>,<br>                style: TextStyle(<br>                  fontSize: <span class="hljs-number">12.0</span>,<br>                ),<br>              ),<br>            )<br>          ],<br>        ),<br>        onTap: () &#123;<br>          _onItemClick(index, data);<br>        &#125;,<br>      ),<br>    );<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">if</span> (_datas == <span class="hljs-keyword">null</span> || _datas.isEmpty) &#123;<br>      <span class="hljs-keyword">return</span> Center(child: CircularProgressIndicator());<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      Widget listView = ListView.builder(<br>        padding: EdgeInsets.all(<span class="hljs-number">10.0</span>),<br>        itemCount: _datas.length * <span class="hljs-number">2</span>,<br>        itemBuilder: (context, i) =&gt; _renderRow(i),<br>        controller: _listController,<br>      );<br>      <span class="hljs-keyword">return</span> RefreshIndicator(child: listView, onRefresh: _pullToRefresh);<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre>
<h3 id="基于webView详情"><a href="#基于webView详情" class="headerlink" title="基于webView详情"></a>基于webView详情</h3><pre class="highlight"><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/cupertino.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_news/constants/constants.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_webview_plugin/flutter_webview_plugin.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewsDetailPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">String</span> url;<br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">String</span> title;<br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">String</span> postId;<br><br>  <span class="hljs-keyword">const</span> NewsDetailPage(&#123;Key key, <span class="hljs-keyword">this</span>.postId, <span class="hljs-keyword">this</span>.url, <span class="hljs-keyword">this</span>.title&#125;)<br>      : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;StatefulWidget&gt; createState() =&gt; NewsDetailPageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewsDetailPageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">NewsDetailPage</span>&gt; </span>&#123;<br>  <span class="hljs-built_in">bool</span> loaded = <span class="hljs-keyword">false</span>;<br>  <span class="hljs-built_in">String</span> detailDataStr;<br>  <span class="hljs-keyword">final</span> flutterWebViewPlugin = FlutterWebviewPlugin();<br><br>  NewsDetailPageState(&#123;Key key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> initState() &#123;<br>    <span class="hljs-keyword">super</span>.initState();<br>    flutterWebViewPlugin.onStateChanged.listen((state) &#123;<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;state: <span class="hljs-subst">$&#123;state.type&#125;</span>&quot;</span>);<br>      <span class="hljs-keyword">if</span> (state.type == WebViewState.finishLoad) &#123;<br>        setState(() &#123;<br>          loaded = <span class="hljs-keyword">true</span>;<br>        &#125;);<br>      &#125;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-built_in">List</span>&lt;Widget&gt; titleContent = [];<br>    titleContent.add(Text(<br>        widget.title == <span class="hljs-keyword">null</span> || widget.title.isEmpty<br>            ? Strings.newsDetail<br>            : widget.title,<br>        style: TextStyle(color: Colors.white)));<br>    <span class="hljs-keyword">if</span> (!loaded) &#123;<br>      titleContent.add(CupertinoActivityIndicator());<br>    &#125;<br>    titleContent.add(Container(width: <span class="hljs-number">50.0</span>));<br>    <span class="hljs-keyword">return</span> WebviewScaffold(<br>      url: widget.url,<br>      appBar: AppBar(<br>        title: Row(<br>          mainAxisAlignment: MainAxisAlignment.center,<br>          children: titleContent,<br>        ),<br>        iconTheme: IconThemeData(color: Colors.white),<br>      ),<br>      withZoom: <span class="hljs-keyword">false</span>,<br>      withLocalStorage: <span class="hljs-keyword">true</span>,<br>      withJavascript: <span class="hljs-keyword">true</span>,<br>    );<br>  &#125;<br>&#125;<br><br></code></pre>
<h3 id="请求及数据"><a href="#请求及数据" class="headerlink" title="请求及数据"></a>请求及数据</h3><pre class="highlight"><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter_news/constants/Constants.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:http/http.dart&#x27;</span> <span class="hljs-keyword">as</span> http;<br><span class="hljs-comment">// 使用网上公共接口</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NetWork</span> </span>&#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> _debug = <span class="hljs-keyword">true</span>;<br>  <span class="hljs-comment">//网易新闻的host</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> NETEAST_HOST = <span class="hljs-string">&quot;https://c.m.163.com/&quot;</span>;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> getHost(<span class="hljs-built_in">int</span> type) &#123;<br>    <span class="hljs-keyword">switch</span> (type) &#123;<br>      <span class="hljs-keyword">case</span> Constants.TYPE_NET_NETEASE_NEWS:<br>        <span class="hljs-keyword">return</span> NETEAST_HOST;<br><br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/* 基础GET请求 */</span><br>  <span class="hljs-keyword">static</span> Future&lt;<span class="hljs-built_in">String</span>&gt; <span class="hljs-keyword">get</span>(<span class="hljs-built_in">String</span> url, &#123;<span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt; params&#125;) <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">if</span> (params != <span class="hljs-keyword">null</span> &amp;&amp; params.isNotEmpty) &#123;<br>      <span class="hljs-built_in">StringBuffer</span> sb = <span class="hljs-built_in">StringBuffer</span>(<span class="hljs-string">&quot;?&quot;</span>);<br>      params.forEach((key, value) &#123;<br>        sb.write(<span class="hljs-string">&quot;<span class="hljs-subst">$key</span>&quot;</span> + <span class="hljs-string">&quot;=&quot;</span> + <span class="hljs-string">&quot;<span class="hljs-subst">$value</span>&quot;</span> + <span class="hljs-string">&quot;&amp;&quot;</span>);<br>      &#125;);<br>      <span class="hljs-built_in">String</span> paramStr = sb.toString();<br>      paramStr = paramStr.substring(<span class="hljs-number">0</span>, paramStr.length - <span class="hljs-number">1</span>);<br>      url += paramStr;<br>    &#125;<br>    http.Response res = <span class="hljs-keyword">await</span> http.<span class="hljs-keyword">get</span>(url, headers: getCommonHeader());<br>    <span class="hljs-keyword">if</span> (_debug) &#123;<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;发起Get请求_____<span class="hljs-subst">$url</span>|________________<span class="hljs-subst">$&#123;res.body&#125;</span>|&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res.body;<br>  &#125;<br><br><span class="hljs-comment">/* 基础POST请求 */</span><br>  <span class="hljs-keyword">static</span> Future&lt;<span class="hljs-built_in">String</span>&gt; post(<span class="hljs-built_in">String</span> url, &#123;<span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt; params&#125;) <span class="hljs-keyword">async</span> &#123;<br>    http.Response res =<br>        <span class="hljs-keyword">await</span> http.post(url, body: params, headers: getCommonHeader());<br>    <span class="hljs-keyword">if</span> (_debug) &#123;<br>      <span class="hljs-built_in">print</span>(<br>          <span class="hljs-string">&#x27;|发起Post请求|_______|<span class="hljs-subst">$url</span>|______|<span class="hljs-subst">$&#123;params.toString()&#125;</span>|________|<span class="hljs-subst">$&#123;res.body&#125;</span>|&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res.body;<br>  &#125;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt; getCommonHeader() &#123;<br>    <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt; header = <span class="hljs-built_in">Map</span>();<br>    header[<span class="hljs-string">&#x27;User-Agent&#x27;</span>] =<br>        <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36&#x27;</span>;<br>    <span class="hljs-keyword">return</span> header;<br>  &#125;<br>&#125;<br><br></code></pre>
<p><a href="https://github.com/lizil-git/flutter_news.git">源码获取地址</a></p>
]]></content>
  </entry>
  <entry>
    <title>自动创建html</title>
    <url>/posts/fd390730.html</url>
    <content><![CDATA[<p>直接上代码.这里主要是展示一种思想,将功能近乎相同的小页面抽离为一种配置即可完成的东西,防止自己做无用代码</p>
<pre class="highlight"><code class="hljs JavaScript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> outFileBasePath = path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;../static&#x27;</span>);<br><span class="hljs-keyword">const</span> dirCache = &#123;&#125;;<br><span class="hljs-keyword">let</span> pageRouter = [<br>    &#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-attr">fileName</span>: <span class="hljs-string">&#x27;/introduce/payroll_calculate_incomeTax&#x27;</span>, <span class="hljs-comment">// 路径</span><br>        <span class="hljs-attr">style</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-attr">script</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-attr">width</span>: <span class="hljs-number">750</span>,<br>        <span class="hljs-attr">imgList</span>: [<br>            &#123;<br>                <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;xxxxxx.png&#x27;</span>,<br>                <span class="hljs-attr">alt</span>: <span class="hljs-string">&#x27;产品介绍图&#x27;</span>,<br>            &#125;<br>        ]<br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;邀请企业，赚大额现金&#x27;</span>,<br>        <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-attr">fileName</span>: <span class="hljs-string">&#x27;/invitationFriend&#x27;</span>, <span class="hljs-comment">// 路径</span><br>        <span class="hljs-attr">style</span>: <span class="hljs-string">`</span><br><span class="hljs-string">&lt;style&gt;</span><br><span class="hljs-string">    .content &#123;</span><br><span class="hljs-string">        background: #FF4A44;</span><br><span class="hljs-string">        padding-bottom: 67px;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&lt;/style&gt;</span><br><span class="hljs-string">        `</span>,<br>        <span class="hljs-attr">script</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-attr">width</span>: <span class="hljs-number">500</span>,<br>        <span class="hljs-attr">imgList</span>: [<br>            &#123;<br>                <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;xxxxxxxx.png&#x27;</span>,<br>                <span class="hljs-attr">alt</span>: <span class="hljs-string">&#x27;邀请企业福利介绍&#x27;</span>,<br>            &#125;<br>        ]<br>    &#125;<br>];<br>pageRouter.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">router</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> filePath = outFileBasePath + router.<span class="hljs-property">fileName</span>;<br>    <span class="hljs-keyword">let</span> fileContent = <span class="hljs-string">`&lt;!DOCTYPE html&gt;</span><br><span class="hljs-string">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&lt;head&gt;</span><br><span class="hljs-string">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="hljs-string">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="hljs-string">&lt;link rel=&quot;icon&quot; href=&quot;./favicon.ico&quot;&gt;</span><br><span class="hljs-string">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="hljs-string">&lt;title&gt;<span class="hljs-subst">$&#123;router.title || <span class="hljs-string">&#x27;页面标题&#x27;</span>&#125;</span>&lt;/title&gt;</span><br><span class="hljs-string">&lt;style&gt;</span><br><span class="hljs-string">    * &#123;</span><br><span class="hljs-string">        margin: 0;</span><br><span class="hljs-string">        padding: 0;</span><br><span class="hljs-string">        overflow-x: hidden;</span><br><span class="hljs-string">        -ms-overflow-style: none;</span><br><span class="hljs-string">        overflow: -moz-scrollbars-none;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    *::-webkit-scrollbar &#123;</span><br><span class="hljs-string">        display: none;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    .content &#123;</span><br><span class="hljs-string">        width: 100vw;</span><br><span class="hljs-string">        min-height: 100vh;</span><br><span class="hljs-string">        background: #ffffff;</span><br><span class="hljs-string">        display: flex;</span><br><span class="hljs-string">        justify-content: flex-start;</span><br><span class="hljs-string">        flex-direction: column;</span><br><span class="hljs-string">        align-items: center;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    #mask &#123;</span><br><span class="hljs-string">        position: fixed;</span><br><span class="hljs-string">        top: 0;</span><br><span class="hljs-string">        left: 0;</span><br><span class="hljs-string">        right: 0;</span><br><span class="hljs-string">        bottom: 0;</span><br><span class="hljs-string">        z-index: 1;</span><br><span class="hljs-string">        background-color: #ffffff;</span><br><span class="hljs-string">        display: flex;</span><br><span class="hljs-string">        align-items: center;</span><br><span class="hljs-string">        justify-content: center;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    .loading &#123;</span><br><span class="hljs-string">        position: relative;</span><br><span class="hljs-string">        width: 30px;</span><br><span class="hljs-string">        height: 30px;</span><br><span class="hljs-string">        border: 2px solid rgba(0, 0, 0, 0.2);</span><br><span class="hljs-string">        border-left-color: #000;</span><br><span class="hljs-string">        border-radius: 100%;</span><br><span class="hljs-string">        animation: circle infinite 0.75s linear;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    @keyframes circle &#123;</span><br><span class="hljs-string">        0% &#123;</span><br><span class="hljs-string">            transform: rotate(0);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        100% &#123;</span><br><span class="hljs-string">            transform: rotate(360deg);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&lt;/style&gt;</span><br><span class="hljs-string"><span class="hljs-subst">$&#123;router.style&#125;</span></span><br><span class="hljs-string">&lt;/head&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">    &lt;div class=&quot;content&quot;&gt;</span><br><span class="hljs-string">        <span class="hljs-subst">$&#123;router.imgList.map(item =&gt; &#123;</span></span><br><span class="hljs-subst"><span class="hljs-string">    <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;img src=&quot;&quot; alt=&quot;<span class="hljs-subst">$&#123;item.alt&#125;</span>&quot;&gt;`</span></span></span><br><span class="hljs-subst"><span class="hljs-string">&#125;).join(<span class="hljs-string">&#x27;&#x27;</span>)&#125;</span></span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">    &lt;div id=&quot;mask&quot;&gt;</span><br><span class="hljs-string">        &lt;div class=&quot;loading&quot;&gt;&lt;/div&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">    &lt;script&gt;</span><br><span class="hljs-string">        let flag = 0;</span><br><span class="hljs-string">        let imgList = <span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(router.imgList)&#125;</span>;</span><br><span class="hljs-string">        let imgs = document.querySelectorAll(&#x27;.content img&#x27;);</span><br><span class="hljs-string">        let mask = document.querySelector(&#x27;#mask&#x27;)</span><br><span class="hljs-string">        imgs.forEach((e, i) =&gt; &#123;</span><br><span class="hljs-string">            let url = imgList[i].url + &#x27;?&#x27; + new Date().getTime();</span><br><span class="hljs-string">            e.src = url;</span><br><span class="hljs-string">            e.onload = function () &#123;</span><br><span class="hljs-string">                flag++;</span><br><span class="hljs-string">                if(flag === <span class="hljs-subst">$&#123;router.imgList.length&#125;</span>)&#123;</span><br><span class="hljs-string">                    handleImgWidth();</span><br><span class="hljs-string">                    window.addEventListener(&quot;resize&quot;, handleImgWidth);</span><br><span class="hljs-string">                    mask.style.display = &#x27;none&#x27;</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;)</span><br><span class="hljs-string">        function handleImgWidth() &#123;</span><br><span class="hljs-string">            let imgArr = document.querySelectorAll(&#x27;.content img&#x27;);</span><br><span class="hljs-string">            let clientWidth = document.querySelector(&#x27;.content&#x27;).clientWidth;</span><br><span class="hljs-string">            if (clientWidth &gt; 750) &#123;</span><br><span class="hljs-string">                for (let i = 0; i &lt; imgArr.length; i++) &#123;</span><br><span class="hljs-string">                    imgArr[i].style.width = &#x27;<span class="hljs-subst">$&#123;router.width&#125;</span>px&#x27;</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">            &#125; else &#123;</span><br><span class="hljs-string">                for (let i = 0; i &lt; imgArr.length; i++) &#123;</span><br><span class="hljs-string">                    imgArr[i].style.width = &#x27;100vw&#x27;</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &lt;/script&gt;</span><br><span class="hljs-string">    <span class="hljs-subst">$&#123;router.script&#125;</span></span><br><span class="hljs-string">&lt;/body&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">    `</span><br>    <span class="hljs-title function_">mkdir</span>(filePath + <span class="hljs-string">&#x27;/index.html&#x27;</span>, fileContent)<br>&#125;);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">mkdir</span>(<span class="hljs-params">filePath, data</span>) &#123;<br>    <span class="hljs-keyword">const</span> arr = filePath.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br>    <span class="hljs-keyword">let</span> dir = arr[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (dir &amp;&amp; !dirCache[dir] &amp;&amp; !fs.<span class="hljs-title function_">existsSync</span>(dir)) &#123;<br>            dirCache[dir] = <span class="hljs-literal">true</span>;<br>            fs.<span class="hljs-title function_">mkdirSync</span>(dir);<br>        &#125;<br>        dir = dir + <span class="hljs-string">&#x27;/&#x27;</span> + arr[i];<br>    &#125;<br>    fs.<span class="hljs-title function_">writeFileSync</span>(filePath, data, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>    &#125;)<br>&#125;<br></code></pre>
<pre class="highlight"><code class="hljs bash">$ <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;node server/statusPage.js &amp;&amp; cross-env BASE_URL=&#x27;https://www.xxxxx.cn&#x27; nuxt build &quot;</span>,<br><br></code></pre>
]]></content>
  </entry>
  <entry>
    <title>Mac搭建Flutter环境</title>
    <url>/posts/662afcd5.html</url>
    <content><![CDATA[<p>安装Flutter学习网站：<a href="https://flutter.cn/docs/get-started/install">Flutter安装文档</a></p>
<h3 id="安装Flutter-SDK（全程以Mac为例）"><a href="#安装Flutter-SDK（全程以Mac为例）" class="headerlink" title="安装Flutter SDK（全程以Mac为例）"></a>安装Flutter SDK（全程以Mac为例）</h3><p>这里有两种方式进行安装，分别是使用安装包和使用git进行操作<br>:::info<br>方法一<br><a href="https://flutter.cn/docs/development/tools/sdk/releases">Flutter版本列表</a>在这里选择合适的版本进行下载<br>下载完成后解压并<br>方式二<br>找到自己准备存放Flutter的文件夹 并按照如下操作<br>:::</p>
<pre class="highlight"><code class="hljs bash">// 开始下载<br>$ git <span class="hljs-built_in">clone</span> https://github.com/flutter/flutter.git -b stable<br></code></pre>
<pre class="highlight"><code class="hljs bash">// 查询自己默认使用的哪个shell<br>$ <span class="hljs-built_in">echo</span> <span class="hljs-variable">$SHELL</span><br>// bash<br>$ vim ~/.bash_profile<br>// zsh<br>$ vim ~/.zshrc<br>// 添加镜像<br>$ <span class="hljs-built_in">export</span> PUB_HOSTED_URL=https://mirrors.tuna.tsinghua.edu.cn/dart-pub<br>$ <span class="hljs-built_in">export</span> FLUTTER_STORAGE_BASE_URL=https://mirrors.tuna.tsinghua.edu.cn/flutter<br>$ <span class="hljs-built_in">export</span> FLUTTER=~/xxx // 自己文件位置 <br>$ <span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$FLUTTER</span>/bin:<span class="hljs-variable">$PATH</span><br>// 退出编辑 ⇧+q 并输入 wq！<br>// 重载命令<br>// bash<br>$ <span class="hljs-built_in">source</span> ~/.bash_profile<br>// zsh<br>$ <span class="hljs-built_in">source</span> ~/.zshrc<br>// flutter doctor命令来查看当前环境是否需要安装其他的依赖 全部都出现对钩就表明检查通过<br>$ flutter doctor<br></code></pre>
<h3 id="检查时出现的问题"><a href="#检查时出现的问题" class="headerlink" title="检查时出现的问题"></a>检查时出现的问题</h3><ol>
<li>Android Studio (not installed)<br>因为Flutter需要依赖Android Studio来为提供Android平台的支持，因此需要安装全量安装Android Studio，<a href="https://developer.android.google.cn/studio">Android Studio安装地址</a>，</li>
<li>Android toolchain - develop for Android devices —–[X]<br>Unable to locate Android SDK.</li>
</ol>
<p>Install Android Studio from:<br><a href="https://developer.android.com/studio/index.html">https://developer.android.com/studio/index.html</a><br>On first launch it will assist you in installing the Android SDK<br>components.<br>(or visit <a href="https://flutter.dev/docs/get-started/install/macos#android-setup">https://flutter.dev/docs/get-started/install/macos#android-setup</a><br>for detailed instructions).<br>If the Android SDK has been installed to a custom location, please use<br><code>flutter config --android-sdk</code> to update to that location.<br><strong>打开下载的Android Studio 并点击Configure 选择SDK Manger 找到 Android SDK 复制其 Android SDK Location。打开命令行并执行 ： flutter config –android-sdk 复制的地址</strong><br><img src="https://cdn.nlark.com/yuque/0/2023/png/28427234/1680701064513-79eeffb5-0276-4482-9eff-4a664a029c11.png#averageHue=%234f515e&clientId=u708b8274-f4c1-4&from=paste&height=310&id=ubc603d7a&name=image.png&originHeight=620&originWidth=1626&originalType=binary&ratio=2&rotation=0&showTitle=false&size=471532&status=done&style=none&taskId=ufcfac575-2689-4d05-8b20-ae83b3c2014&title=&width=813" alt="image.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.nlark.com/yuque/0/2023/png/28427234/1680701064513-79eeffb5-0276-4482-9eff-4a664a029c11.png#averageHue=%234f515e&clientId=u708b8274-f4c1-4&from=paste&height=310&id=ubc603d7a&name=image.png&originHeight=620&originWidth=1626&originalType=binary&ratio=2&rotation=0&showTitle=false&size=471532&status=done&style=none&taskId=ufcfac575-2689-4d05-8b20-ae83b3c2014&title=&width=813" class="lozad post-image"><br><strong>如果再次flutter doctor时还是有问题请检查</strong><br><img src="https://cdn.nlark.com/yuque/0/2023/png/28427234/1680702481156-97a9b94c-0e5f-492e-b280-3d0216838548.png#averageHue=%233d4046&clientId=u708b8274-f4c1-4&from=paste&height=265&id=u581ca1aa&name=image.png&originHeight=530&originWidth=1644&originalType=binary&ratio=2&rotation=0&showTitle=false&size=152265&status=done&style=none&taskId=ued2a2fc9-5dda-4e43-822b-5aa7a5d6c2d&title=&width=822" alt="image.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.nlark.com/yuque/0/2023/png/28427234/1680702481156-97a9b94c-0e5f-492e-b280-3d0216838548.png#averageHue=%233d4046&clientId=u708b8274-f4c1-4&from=paste&height=265&id=u581ca1aa&name=image.png&originHeight=530&originWidth=1644&originalType=binary&ratio=2&rotation=0&showTitle=false&size=152265&status=done&style=none&taskId=ued2a2fc9-5dda-4e43-822b-5aa7a5d6c2d&title=&width=822" class="lozad post-image"></p>
<ol start="3">
<li>Android toolchain - develop for Android devices (Android SDK version 33.0.2)<br>Some Android licenses not accepted. To resolve this, run: flutter doctor–android-licenses</li>
</ol>
<p><strong>这是有些许可还没开启因此只需要执行：flutter doctor –android-licenses</strong></p>
<ol start="4">
<li>Xcode (not installed)<br>同样是需要安装Xcode为其提供iOS方面的支持，<a href="https://developer.apple.com/xcode/">下载地址</a></li>
<li>Xcode - develop for iOS and macOS (Xcode 13.1)</li>
</ol>
<p>“✗ CocoaPods not installed.”<br><strong>十分明确未安装CocoaPods，执行：brew install cocoapods</strong><br>最终检查结果为如下所示即为全部安装成功，除了Flutter是必须得，其他看自己项目将要打包成什么项目进行选择安装，并不是必须的。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/28427234/1680705825519-95fff26c-a0aa-43e2-b750-3440ae2c7300.png#averageHue=%23f1f1f0&clientId=u708b8274-f4c1-4&from=paste&height=192&id=ua8208f34&name=image.png&originHeight=384&originWidth=1024&originalType=binary&ratio=2&rotation=0&showTitle=false&size=218444&status=done&style=none&taskId=u8e7dc8e1-c960-4141-bd67-35be10a41b6&title=&width=512" alt="image.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://cdn.nlark.com/yuque/0/2023/png/28427234/1680705825519-95fff26c-a0aa-43e2-b750-3440ae2c7300.png#averageHue=%23f1f1f0&clientId=u708b8274-f4c1-4&from=paste&height=192&id=ua8208f34&name=image.png&originHeight=384&originWidth=1024&originalType=binary&ratio=2&rotation=0&showTitle=false&size=218444&status=done&style=none&taskId=u8e7dc8e1-c960-4141-bd67-35be10a41b6&title=&width=512" class="lozad post-image"></p>
]]></content>
  </entry>
  <entry>
    <title>包管理器命令</title>
    <url>/posts/187a3295.html</url>
    <content><![CDATA[<p>记录一下各种开发中能够用到的工具命令,方便快速查询到一些常用命令</p>
<h2 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h2><div class="post-note note-info"><p>设置包下载源：yarn config set npmRegistryServer<br>查看当前包下载源：yarn config get registry<br>自动安装最新版本，会覆盖指定版本号：yarn add [package]<br>一次性添加多个包：yarn add [package] [package] [package]<br>添加指定版本的包：yarn add [package]@[version]<br>安装某个tag：yarn add [package]@[tag]<br>添加到devDependencies：–dev，-D<br>添加到peerDependencies：–peer， -P<br>添加到optionalDependencies：–optional，-O<br>升级到最新版本：yarn upgrade [package]<br>升级到指定版本：yarn upgrade [package]@[version]<br>升级到指定tag：yarn upgrade [package]@[tag]<br>移除包：yarn remove [package]<br>安装所有依赖： yarn，yarn install<br>安装一个包的单一版本：yarn install –flat<br>强制重新下载所有包：yarn install –force<br>只安装生产环境依赖：yarn install –production<br>可以用来查看某个模块的最新版本信息：yarn info [package]<br>列出已缓存的每个包：yarn cache list<br>返回全局缓存位置：yarn cache dir<br>清除缓存：yarn cache clean </p></div>
<h2 id="yrm"><a href="#yrm" class="headerlink" title="yrm"></a>yrm</h2><div class="post-note note-info"><p>yrm 是一个 yarn源管理器，可以快速地在源间切换<br>查看已有源：yrm ls<br>使用xxx镜像源： yrm use xxx<br>增加一个源：yrm add &lt;源名称&gt; &lt;源地址&gt;<br>删除源: yrm del &lt;源名称&gt;<br>测试xx镜像源访问速度：yrm test taobao<br>查看npm当前镜像源：npm config get registry<br>查看yarn当前镜像源：yarn config get registry </p></div>
<h2 id="npm、cnpm"><a href="#npm、cnpm" class="headerlink" title="npm、cnpm"></a>npm、cnpm</h2><div class="post-note note-info"><p>设置包下载源：npm config set registry<br>获取包下载源：npm config get registry<br>安装所有依赖: npm install，npm i<br>安装到全局目录里：-g，–global<br>添加到dependencies：-S，–save<br>添加到devDependencies-D，–save-dev<br>卸载依赖，不卸载package.json的对应信息：npm uninstall [package]<br>卸载全局模块：npm uninstall [package] -g<br>卸载依赖，不卸载package.json中的dependencies对应信息：npm uninstall [package] –save<br>卸载依赖，同时package.json中的devDependencies对应信息：npm uninstall [package] –save-dev<br>更新最新版本:npm update [package]<br>更新到指定版本号:npm update [package]@[version]<br>更新到最后一个新版本:npm install [package]@latest<br>查看项目中模块所在的目录：npm root<br>查看全局安装的模块所在目录：npm root -g<br>查看本地已安装模块的清单列表:npm list， npm ls<br>查看某个包对于各种包的依赖关系：npm view [version] dependencies<br>查看[package]最新的版本号：npm view [package] version<br>查看所有[package]历史版本号：npm view [package] versions<br>查看最新的[package]版本的信息：npm view [package]<br>查看[package]的详细信息：npm info [package]<br>查看本地已安装的[package]的详细信息：npm list [package] ，npm ls [package]<br> 查看[package]包的来源地址：npm view [package] repository.url<br>清除npm的缓存：npm cache clean<br>清除项目中没有被使用的包：npm prune<br>检查模块是否已经过时：npm outdated<br>会打开默认浏览器跳转到github中[package]的页面：npm repo [package]<br>会打开默认浏览器跳转到github中jquery的README.MD文件信息：npm docs [package]<br>会打开默认浏览器跳转到github中jquery的主页：npm home [package]</p></div>
<h2 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h2><div class="post-note note-info"><p>nrm can help you easy and fast switch between different npm registries（nrm可以帮助您在不同的npm镜像源之间轻松快速地切换）<br>列出所有源： nrm ls<br>查看当前源：nrm current<br>使用某个源：nrm use &lt;源名称&gt;<br>添加一个源：nrm add &lt;源名称&gt; &lt;源地址&gt;<br>删除一个源：nrm del &lt;源名称&gt;<br>  <a href="https://www.npmjs.com/package/nrm">nrm查看更多指令</a></p></div>
<h2 id="pnpm"><a href="#pnpm" class="headerlink" title="pnpm"></a>pnpm</h2><div class="post-note note-info"><p>pnpm也称高性能npm,相比npm、yarn优势在于节省磁盘空间并提升安装速度。<br>安装依赖：pnpm install xxx&#x2F;pnpm i xxx<br>设置包下载源：pnpm config set registry<br>获取包下载源：pnpm config get registry<br>安装依赖到dependencies:pnpm add<br>安装依赖到devDependencies：pnpm add -D<br>更新依赖包：pnpm update [package]，pnpm up [package]	<br>删除依赖包：pnpm remove [package]<br>所有命令查询文档：<a href="https://www.pnpm.cn/cli/add">pnpm中文文档-CLI命令</a></p></div>
<h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><div class="post-note note-info"><p>安装指定版本node：nvm install vx.x.x<br>安装最新node：nvm install stable<br>设置node默认版：nvm alias default [node版本号]<br>删除指定版本node：nvm uninstall vx.x.x<br>查看所有已安装版本： nvm ls，nvm list<br>列出所以远程服务器的版本：nvm ls-remote<br>显示当前的版本：nvm current<br>给不同的版本号添加别名：nvm alias<br>删除已定义的别名：nvm unalias<br>在当前版本node下，重新全局安装指定版本号的npm包：nvm reinstall-packages<br>查看当前版本： nvm -v<br><a href="https://nvm.uihtm.com/">nvm官方文档</a></p></div>
<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><div class="post-note note-info"></div>
<h2 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h2><div class="post-note note-info"></div>
]]></content>
  </entry>
</search>
