[{"title":"","url":"/posts/0.html","content":"安装Flutter学习网站：Flutter安装文档\n安装Flutter SDK（全程以Mac为例）这里有两种方式进行安装，分别是使用安装包和使用git进行操作:::info方法一Flutter版本列表在这里选择合适的版本进行下载下载完成后解压并方式二找到自己准备存放Flutter的文件夹 并按照如下操作:::\n// 开始下载$ git clone https://github.com/flutter/flutter.git -b stable\n// 查询自己默认使用的哪个shell$ echo $SHELL// bash$ vim ~/.bash_profile// zsh$ vim ~/.zshrc// 添加镜像$ export PUB_HOSTED_URL=https://mirrors.tuna.tsinghua.edu.cn/dart-pub$ export FLUTTER_STORAGE_BASE_URL=https://mirrors.tuna.tsinghua.edu.cn/flutter$ export FLUTTER=~/xxx // 自己文件位置 $ export PATH=$FLUTTER/bin:$PATH// 退出编辑 ⇧+q 并输入 wq！// 重载命令// bash$ source ~/.bash_profile// zsh$ source ~/.zshrc// flutter doctor命令来查看当前环境是否需要安装其他的依赖 全部都出现对钩就表明检查通过$ flutter doctor\n检查时出现的问题\nAndroid Studio (not installed)因为Flutter需要依赖Android Studio来为提供Android平台的支持，因此需要安装全量安装Android Studio，Android Studio安装地址，\nAndroid toolchain - develop for Android devices —–[X]Unable to locate Android SDK.\n\nInstall Android Studio from:https://developer.android.com/studio/index.htmlOn first launch it will assist you in installing the Android SDKcomponents.(or visit https://flutter.dev/docs/get-started/install/macos#android-setupfor detailed instructions).If the Android SDK has been installed to a custom location, please useflutter config --android-sdk to update to that location.打开下载的Android Studio 并点击Configure 选择SDK Manger 找到 Android SDK 复制其 Android SDK Location。打开命令行并执行 ： flutter config –android-sdk 复制的地址如果再次flutter doctor时还是有问题请检查\n\nAndroid toolchain - develop for Android devices (Android SDK version 33.0.2)Some Android licenses not accepted. To resolve this, run: flutter doctor–android-licenses\n\n这是有些许可还没开启因此只需要执行：flutter doctor –android-licenses\n\nXcode (not installed)同样是需要安装Xcode为其提供iOS方面的支持，下载地址\nXcode - develop for iOS and macOS (Xcode 13.1)\n\n“✗ CocoaPods not installed.”十分明确未安装CocoaPods，执行：brew install cocoapods最终检查结果为如下所示即为全部安装成功，除了Flutter是必须得，其他看自己项目将要打包成什么项目进行选择安装，并不是必须的。\n","categories":[],"tags":[]},{"title":"","url":"/posts/0.html","content":"第一步：搭建环境在开始搭建第一个Flutter应用之前，还需要在电脑里安装Flutter环境，如果还未搭建环境请先移步这里。如果环境已安装完毕，那就可以开始，\n第二步：创建应用首先找到即将使用的文件夹并在当前文件夹打开命令行 flutter create 项目名称如图一创建完成后按照下面的命令执行即可进入该项目中运行如图二\n第三步：了解文件完成到这里就可以开始后面定制化的开发了，再次之前可以对每个文件夹进行介绍一下，方便后期开发\npubspec.yamlpubspec.lock与vue一样，是依赖版本锁\nios&#x2F;android&#x2F;web&#x2F;windows&#x2F;macos&#x2F;linux对应的不同平台所内置的引擎能力,作为一名前端人员就可以看Web，这里面就有一个html模版，里面通过js将dart代码动态加载并渲染。\nlib这里面就是主要开发文件夹，可以在这里创建自己的开发文件，其中main.dart就是主入口文件，\n第四步：Flutter 架构概览\nFramework框架层纯dart语言写成的SDK，实现了一套基础库，其中Foundation、Animation、Painting、Gestures都是Google实现的UI、动画渲染、手势交互层面的基础库，Rendering是渲染层，纯抽象布局的一部分，依赖于Foundation、Animation、Painting、Gestures。在这里将会形成一个可渲染对象组成的渲染树，当渲染内容发生变化，这里就会找出变化的内容进行更新，与vue的Render大同小异。Widgets就是Flutter内置的基础组件库。而Material和Cupertinno则是两套不同风格的具体组件库，在开发工程中就回去引用其中的包，如mai.dart中第一行就引用了import ‘package:flutter&#x2F;material.dart’\nEngine引擎层对 Flutter 的核心 API 进行了底层封装并将功能暴露给框架层这里就是Flutter根据不同应用渲染出结果、调用不同平台的原生基础能力，都是通过这里进行总装，通过调用不同内容进行分发调用。\nEmbrdder嵌入层与平台进行整合，将Flutter引擎嵌入对应平台，因为各平台使用的底层语言不同，这里就会产生对应适配，这样Flutter才可以正常渲染。这是Flutter实现跨平台最为核心的一个地方。如果需要对接新平台也将是在这里增加一套新嵌入层。\n第五步：语言介绍常用如下：\n变量声明使用var声明变量、使用const声明常量、可以Object声明一个对象，与TS比较像\n函数//无参数类型-这是不带函数参数或者说参数列表为空String getDefaultErrorMsg() =&gt; &#x27;Unknown Error!&#x27;;//无参数类型-等价于上面函数形式，同样是参数列表为空get getDefaultErrorMsg =&gt; &#x27;Unknown Error!&#x27;;//必需位置参数类型-这里的exception是必需的位置参数String getErrorMsg(Exception exception) =&gt; exception.toString();//必需位置参数类型-这里的exception是必需的位置参数String getErrorMsg(Exception exception) =&gt; exception.toString();//必需位置参数类型-这里的exception是必需的位置参数String getErrorMsg(Exception exception) =&gt; exception.toString();//必需位置参数类型-这里的exception是必需的位置参数String getErrorMsg(Exception exception) =&gt; exception.toString();//注意: 可选命名参数必须在必需位置参数的后面num add(num a, num b, &#123;num c, num d&#125;) &#123;   return a + b + c + d;&#125;void add7([num a, num b], &#123;num c, num d&#125;) &#123;\t// todo&#125;参数默认值(参数默认值只针对可选参数才能添加的。)num add(num a, num b, num c,&#123; num d = 5 &#125;, [num e = 5]&#125;) &#123;    return a + b + c + d;&#125;\nmixinmixin 可以实现类似多重继承的功能，但是实际上和多重继承又不一样。多重继承中相同的函数执行并不会存在 ”父子“ 关系，mixin还可以抽象和重用一系列特性，mixin实际上实现了一条继承链声明，mixin 的顺序代表了继承链的继承顺序，声明在后面的 mixin，一般会最先执行\n异步Future使用Future对象封装了Dart 的异步操作，在定义时进行声明即可，开箱即用。\nStreamStream 是一系列异步事件的序列。其类似于一个异步的 Iterable，不同的是当你向 Iterable 获取下一个事件时它会立即给你，但是 Stream 则不会立即给你而是在它准备好时告诉你。Stream 提供一个异步的数据序列。数据序列包括用户生成的事件和从文件读取的数据。你可以使用 Stream API 中的 listen() 方法和 await for 关键字来处理一个 Stream。当出现错误时，Stream 提供一种处理错误的方式。Stream 有两种类型：Single-Subscription 和 Broadcast\n安利为了减少学习成本，这里推荐一下Kraken，使用它就是做了个桥接层，让我们使用前端技术进行Flutter开发了。\n第四步：实战 、\n因为Flutter本就是支持多运用的，因此本次案例选择Chrome来运行查看效果，这样可以快速的运行并查看效果。Flutter是支持热更新的，但是在第一次使用VScode开发Flutter时，有可能VScode可能配置并没有开启，因此需要再设置中进行配置并重载，如图1，再次运行后就可以支持Flutter的热更新了。开始码代码，下面是lib下main.dart的代码我在下面进行注释，大致了解一下这里每一个方法的作用\nimport &#x27;package:flutter/material.dart&#x27;;void main() &#123; // main函数就是入口函数  runApp(const MyApp()); // MyApp 这里就是下面创建的根组件，runApp就是flutter程序入口，传入的Widget即是我们需要显示的界面Widget，widget就类似于前端的组件&#125;class MyApp extends StatelessWidget &#123; // MyApp继承了无状态的Widget，表示是纯UI组件  const MyApp(&#123;super.key&#125;);  // This widget is the root of your application.  @override  Widget build(BuildContext context) &#123; // build 就相当于Render函数    return MaterialApp( // 表述整个页面的布局      title: &#x27;Flutter Demo&#x27;, // 这里就是APP名称      theme: ThemeData( // 使用主题        // This is the theme of your application.        //        // Try running your application with &quot;flutter run&quot;. You&#x27;ll see the        // application has a blue toolbar. Then, without quitting the app, try        // changing the primarySwatch below to Colors.green and then invoke        // &quot;hot reload&quot; (press &quot;r&quot; in the console where you ran &quot;flutter run&quot;,        // or simply save your changes to &quot;hot reload&quot; in a Flutter IDE).        // Notice that the counter didn&#x27;t reset back to zero; the application        // is not restarted.        primarySwatch: Colors.blue, // 主题颜色是蓝色      ),      home: const MyHomePage(title: &#x27;Frist Flutter!&#x27;), // 内容区域 这里定义了一个MyHomePage的类传参为title 这一块就是图1里面的内容    );  &#125;&#125;class MyHomePage extends StatefulWidget &#123; // 创建MyHomePageWidget，继承与有状态Widget  const MyHomePage(&#123;super.key, required this.title&#125;); // 接收参数 required表示必传，  // This widget is the home page of your application. It is stateful, meaning  // that it has a State object (defined below) that contains fields that affect  // how it looks.  // This class is the configuration for the state. It holds the values (in this  // case the title) provided by the parent (in this case the App widget) and  // used by the build method of the State. Fields in a Widget subclass are  // always marked &quot;final&quot;.  final String title;  @override  State&lt;MyHomePage&gt; createState() =&gt; _MyHomePageState(); // 创建一个state进行管理计数器部分&#125;class _MyHomePageState extends State&lt;MyHomePage&gt; &#123;  int _counter = 0;  void _incrementCounter() &#123; // 定义一个方法    setState(() &#123;      // This call to setState tells the Flutter framework that something has      // changed in this State, which causes it to rerun the build method below      // so that the display can reflect the updated values. If we changed      // _counter without calling setState(), then the build method would not be      // called again, and so nothing would appear to happen.      _counter++;    &#125;);  &#125;  @override  Widget build(BuildContext context) &#123;    // This method is rerun every time setState is called, for instance as done    // by the _incrementCounter method above.    //    // The Flutter framework has been optimized to make rerunning build methods    // fast, so that you can just rebuild anything that needs updating rather    // than having to individually change instances of widgets.    return Scaffold( // 表示是一个容器      appBar: AppBar( // 这里创建一个头部，如图3        // Here we take the value from the MyHomePage object that was created by        // the App.build method, and use it to set our appbar title.        title: Text(widget.title),      ),      body: Center( // 这里表述body是一个用居中容器包裹的，只能接受一个组件，放在child上        // Center is a layout widget. It takes a single child and positions it        // in the middle of the parent.        child: Column( // 创建一行，可以接受多个组件，放在children中          // Column is also a layout widget. It takes a list of children and          // arranges them vertically. By default, it sizes itself to fit its          // children horizontally, and tries to be as tall as its parent.          //          // Invoke &quot;debug painting&quot; (press &quot;p&quot; in the console, choose the          // &quot;Toggle Debug Paint&quot; action from the Flutter Inspector in Android          // Studio, or the &quot;Toggle Debug Paint&quot; command in Visual Studio Code)          // to see the wireframe for each widget.          //          // Column has various properties to control how it sizes itself and          // how it positions its children. Here we use mainAxisAlignment to          // center the children vertically; the main axis here is the vertical          // axis because Columns are vertical (the cross axis would be          // horizontal).          mainAxisAlignment: MainAxisAlignment.center, // 纵向排列方式，这里使用的是居中          children: &lt;Widget&gt;[ // 表示这个数组是一个组件数组            const Text( // 这是创建一个文本              &#x27;You have pushed the button this many times:&#x27;,            ),            Text( //              &#x27;$_counter&#x27;, // 使用$ 接受一个变量              style: Theme.of(context).textTheme.headlineMedium, // 设置文本样式            ),          ],        ),      ),      floatingActionButton: FloatingActionButton( // 创建一个浮动的按钮        onPressed: _incrementCounter, // 相当于点击事件，        tooltip: &#x27;Increment&#x27;, // 长按提示内容，Web中效果是鼠标移入提示        child: const Icon(Icons.add), // 按钮接受一个组件 这里直接创建一个icon       ), // This trailing comma makes auto-formatting nicer for build methods.    );  &#125;&#125;\n在上面的代码中，可以看到flutter就是一个一个的组件堆积而成，基于函数式声明式的开发的有一定的开发基础都可以进行开发，这里面比较难得就是需要知道flutter都提供了那些组件以及组件都需要那些参数、作用都是什么，只要了解了这些flutter开发就不在有任何难度，上面提供了flutter的社区链接和开发文档链接，看完有助于开发。了解完后，看到flutter基于函数式声明式的开发的，跟前端开始有一定差异，那动起手来，多加练习来适应这种开发形式。那就开始开发一些自己页面，只有动手才能加深自己印象，加快学习进度。以下是本次练习的主要代码\n主入口import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:flutter_news/constants/Constants.dart&#x27;;import &#x27;events/ThemeEvent.dart&#x27;;import &#x27;pages/HomePage.dart&#x27;;void main() =&gt; runApp(FlutterNews());class FlutterNews extends StatefulWidget &#123;  @override  _FlutterNewsState createState() =&gt; _FlutterNewsState();&#125;class _FlutterNewsState extends State&lt;FlutterNews&gt; &#123;  @override  void initState() &#123;    super.initState();    Constants.eventBus.on&lt;ThemeEvent&gt;().listen((event) &#123;      setState(() &#123;        Constants.currentTheme = event.themeModel;      &#125;);    &#125;);  &#125;  @override  Widget build(BuildContext context) &#123;    var theme = Constants.currentTheme == Constants.dayTheme        ? ThemeData(            brightness: Brightness.light,            primaryColor: Colors.blue,          )        : ThemeData(            brightness: Brightness.dark,            primaryColor: Colors.black,          );    return MaterialApp(      debugShowCheckedModeBanner: false,      theme: theme,      home: HomePage(),    );  &#125;&#125;\n首页import &#x27;dart:convert&#x27;;import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:flutter_news/constants/Constants.dart&#x27;;import &#x27;package:flutter_news/events/ThemeEvent.dart&#x27;;import &#x27;package:flutter_news/models/local/Channel.dart&#x27;;import &#x27;package:flutter_news/widgets/Newslistwidget.dart&#x27;;import &#x27;aboutpage.dart&#x27;;class HomePage extends StatefulWidget &#123;  HomePage(&#123;Key key&#125;) : super(key: key);  _HomePageState createState() =&gt; _HomePageState();&#125;class _HomePageState extends State&lt;HomePage&gt;    with SingleTickerProviderStateMixin, AutomaticKeepAliveClientMixin &#123;//首页面所有数据的容器  List&lt;dynamic&gt; newsData;  //初始化频道数据的容器  List&lt;Channel&gt; channels;  TabController _tabController;  @override  initState() &#123;    super.initState();    _initChannelData();  &#125;  @override  dispose() &#123;    _tabController.dispose();    super.dispose();  &#125;  //加载初始化json数据  _initChannelData() &#123;    channels = List&lt;Channel&gt;();    Future&lt;String&gt; data =        DefaultAssetBundle.of(context).loadString(&quot;assets/config/channel.json&quot;);    data.then((String value) &#123;      setState(() &#123;        List&lt;dynamic&gt; data = json.decode(value);        _tabController = TabController(          vsync: this,          length: data.length,        );        data.forEach((tmp) &#123;          channels.add(Channel.fromJson(tmp));        &#125;);      &#125;);    &#125;);  &#125;  //初始化标题指示条  Widget _initChannelTitle() &#123;    return TabBar(        controller: _tabController,        indicatorColor: Colors.blue[100],        tabs: channels.map((Channel channel) &#123;          return Tab(            text: channel.channelName,          );        &#125;).toList());  &#125;  //初始化列表内容  Widget _initChannelList() &#123;    return TabBarView(      controller: _tabController,      children: channels.map((Channel channel) &#123;        return NewsListWidget(channel: channel);      &#125;).toList(),    );  &#125;  @override  Widget build(BuildContext context) &#123;    return DefaultTabController(      length: channels.length,      child: Scaffold(        appBar: AppBar(          leading: Icon(Icons.title),          title: Text(Strings.appTitle, style: TextStyle(color: Colors.white)),          bottom: _initChannelTitle(),          actions: &lt;Widget&gt;[            IconButton(              icon: Icon(Icons.assignment),              onPressed: (() &#123;                Navigator.push(                  context,                  MaterialPageRoute(builder: (context) =&gt; AboutPage()),                );              &#125;),            ),            IconButton(                icon: Icon(Icons.autorenew),                onPressed: (() &#123;                  Constants.eventBus.fire(                      Constants.currentTheme == Constants.dayTheme                          ? ThemeEvent(Constants.nightTheme)                          : ThemeEvent(Constants.dayTheme));                &#125;))          ],        ),        body: _initChannelList(),      ),    );  &#125;  @override  bool get wantKeepAlive =&gt; true;&#125;\n\n列表页面import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:flutter_news/api/Apis.dart&#x27;;import &#x27;package:flutter_news/events/BeanEvent.dart&#x27;;import &#x27;package:flutter_news/constants/Constants.dart&#x27;;import &#x27;package:flutter_news/models/local/Channel.dart&#x27;;import &#x27;package:flutter_news/models/network/NewsList.dart&#x27;;import &#x27;package:flutter_news/pages/NewsDetailPage.dart&#x27;;class NewsListWidget extends StatefulWidget &#123;  final Channel channel;  NewsListWidget(&#123;Key key, this.channel&#125;) : super(key: key);  _NewsListState createState() =&gt; _NewsListState();&#125;class _NewsListState extends State&lt;NewsListWidget&gt;    with AutomaticKeepAliveClientMixin &#123;  //当前页  int _page = 0;  //网络请求接口  API$Neteast _api;  //该频道下的所有新闻数据  List&lt;News&gt; _datas;  ScrollController _listController;  @override  bool get wantKeepAlive =&gt; true;  @override  void initState() &#123;    super.initState();    _api = API$Neteast();    _datas = [];    _listController = ScrollController();    _listController.addListener(() &#123;      var maxScroll = _listController.position.maxScrollExtent;      var pixels = _listController.position.pixels;      if (maxScroll == pixels) &#123;        _page += 20;        _getNewsList();      &#125;    &#125;);    Constants.eventBus.on&lt;BeanEvent&lt;NewsList&gt;&gt;().listen((event) &#123;      if (widget.channel.channelId == event.id) &#123;        setState(() &#123;          NewsList data = event.data;          _datas.addAll(data.datas);        &#125;);      &#125;    &#125;);    _getNewsList();  &#125;  @override  void dispose() &#123;    _listController.dispose();    super.dispose();  &#125;  Future&lt;Null&gt; _pullToRefresh() async &#123;    _page = 0;    _datas.clear();    _getNewsList();    return null;  &#125;  _getNewsList() &#123;    _api.getNewsList(        widget.channel.channelType, widget.channel.channelId, _page);  &#125;  _onItemClick(int position, News data) &#123;    if (data.url == null || data.url.isEmpty) &#123;      Scaffold.of(context).showSnackBar(SnackBar(        content: new Text(&#x27;缺少新闻链接&#x27;),        duration: Duration(seconds: 1),      ));    &#125; else &#123;      Navigator.of(context).push(MaterialPageRoute(          builder: (ctx) =&gt; NewsDetailPage(                postId: data.postid,                url: data.url,                title: &quot;&quot;,              )));    &#125;  &#125;  Widget _renderRow(int position) &#123;    if (position.isOdd) return Divider();    final index = position ~/ 2;    News data = _datas[index];    return Card(      color: Colors.grey[250],      elevation: 5.0,      child: InkWell(        child: new Column(          crossAxisAlignment: CrossAxisAlignment.start,          children: [            Image.network(data.imgsrc, fit: BoxFit.fitWidth),            Padding(              padding: const EdgeInsets.all(10.0),              child: Text(                data.title,                style: TextStyle(                  fontSize: 16.0,                  fontWeight: FontWeight.bold,                ),              ),            ),            Padding(              padding: data.digest.isEmpty                  ? const EdgeInsets.all(0.0)                  : const EdgeInsets.only(                      left: 10.0, right: 10.0, bottom: 10.0),              child: Text(                data.digest,                style: TextStyle(                  fontSize: 12.0,                ),              ),            ),            Padding(              padding: const EdgeInsets.only(left: 10.0, right: 10.0),              child: Text(                &#x27;时间：$&#123;data.ptime&#125;&#x27;,                style: TextStyle(                  fontSize: 12.0,                ),              ),            ),            Padding(              padding:                  const EdgeInsets.only(left: 10.0, right: 10.0, bottom: 10.0),              child: Text(                &#x27;来源：$&#123;data.source&#125;&#x27;,                style: TextStyle(                  fontSize: 12.0,                ),              ),            )          ],        ),        onTap: () &#123;          _onItemClick(index, data);        &#125;,      ),    );  &#125;  @override  Widget build(BuildContext context) &#123;    if (_datas == null || _datas.isEmpty) &#123;      return Center(child: CircularProgressIndicator());    &#125; else &#123;      Widget listView = ListView.builder(        padding: EdgeInsets.all(10.0),        itemCount: _datas.length * 2,        itemBuilder: (context, i) =&gt; _renderRow(i),        controller: _listController,      );      return RefreshIndicator(child: listView, onRefresh: _pullToRefresh);    &#125;  &#125;&#125;\n基于webView详情import &#x27;package:flutter/cupertino.dart&#x27;;import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:flutter_news/constants/constants.dart&#x27;;import &#x27;package:flutter_webview_plugin/flutter_webview_plugin.dart&#x27;;class NewsDetailPage extends StatefulWidget &#123;  final String url;  final String title;  final String postId;  const NewsDetailPage(&#123;Key key, this.postId, this.url, this.title&#125;)      : super(key: key);  @override  State&lt;StatefulWidget&gt; createState() =&gt; NewsDetailPageState();&#125;class NewsDetailPageState extends State&lt;NewsDetailPage&gt; &#123;  bool loaded = false;  String detailDataStr;  final flutterWebViewPlugin = FlutterWebviewPlugin();  NewsDetailPageState(&#123;Key key&#125;);  @override  void initState() &#123;    super.initState();    flutterWebViewPlugin.onStateChanged.listen((state) &#123;      print(&quot;state: $&#123;state.type&#125;&quot;);      if (state.type == WebViewState.finishLoad) &#123;        setState(() &#123;          loaded = true;        &#125;);      &#125;    &#125;);  &#125;  @override  Widget build(BuildContext context) &#123;    List&lt;Widget&gt; titleContent = [];    titleContent.add(Text(        widget.title == null || widget.title.isEmpty            ? Strings.newsDetail            : widget.title,        style: TextStyle(color: Colors.white)));    if (!loaded) &#123;      titleContent.add(CupertinoActivityIndicator());    &#125;    titleContent.add(Container(width: 50.0));    return WebviewScaffold(      url: widget.url,      appBar: AppBar(        title: Row(          mainAxisAlignment: MainAxisAlignment.center,          children: titleContent,        ),        iconTheme: IconThemeData(color: Colors.white),      ),      withZoom: false,      withLocalStorage: true,      withJavascript: true,    );  &#125;&#125;\n请求及数据import &#x27;package:flutter_news/constants/Constants.dart&#x27;;import &#x27;package:http/http.dart&#x27; as http;// 使用网上公共接口class NetWork &#123;  static bool _debug = true;  //网易新闻的host  static String NETEAST_HOST = &quot;https://c.m.163.com/&quot;;  static String getHost(int type) &#123;    switch (type) &#123;      case Constants.TYPE_NET_NETEASE_NEWS:        return NETEAST_HOST;      default:        return &#x27;&#x27;;    &#125;  &#125;  /* 基础GET请求 */  static Future&lt;String&gt; get(String url, &#123;Map&lt;String, String&gt; params&#125;) async &#123;    if (params != null &amp;&amp; params.isNotEmpty) &#123;      StringBuffer sb = StringBuffer(&quot;?&quot;);      params.forEach((key, value) &#123;        sb.write(&quot;$key&quot; + &quot;=&quot; + &quot;$value&quot; + &quot;&amp;&quot;);      &#125;);      String paramStr = sb.toString();      paramStr = paramStr.substring(0, paramStr.length - 1);      url += paramStr;    &#125;    http.Response res = await http.get(url, headers: getCommonHeader());    if (_debug) &#123;      print(&#x27;发起Get请求_____$url|________________$&#123;res.body&#125;|&#x27;);    &#125;    return res.body;  &#125;/* 基础POST请求 */  static Future&lt;String&gt; post(String url, &#123;Map&lt;String, String&gt; params&#125;) async &#123;    http.Response res =        await http.post(url, body: params, headers: getCommonHeader());    if (_debug) &#123;      print(          &#x27;|发起Post请求|_______|$url|______|$&#123;params.toString()&#125;|________|$&#123;res.body&#125;|&#x27;);    &#125;    return res.body;  &#125;  static Map&lt;String, String&gt; getCommonHeader() &#123;    Map&lt;String, String&gt; header = Map();    header[&#x27;User-Agent&#x27;] =        &#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36&#x27;;    return header;  &#125;&#125;\n源码获取地址\n","categories":[],"tags":[]},{"title":"自动创建html","url":"/posts/fd390730.html","content":"直接上代码.这里主要是展示一种思想,将功能近乎相同的小页面抽离为一种配置即可完成的东西,防止自己做无用代码\nconst fs = require(&#x27;fs&#x27;);const path = require(&#x27;path&#x27;);const outFileBasePath = path.join(__dirname, &#x27;../static&#x27;);const dirCache = &#123;&#125;;let pageRouter = [    &#123;        title: &#x27;&#x27;,        description: &#x27;&#x27;,        fileName: &#x27;/introduce/payroll_calculate_incomeTax&#x27;, // 路径        style: &#x27;&#x27;,        script: &#x27;&#x27;,        width: 750,        imgList: [            &#123;                url: &#x27;xxxxxx.png&#x27;,                alt: &#x27;产品介绍图&#x27;,            &#125;        ]    &#125;,    &#123;        title: &#x27;邀请企业，赚大额现金&#x27;,        description: &#x27;&#x27;,        fileName: &#x27;/invitationFriend&#x27;, // 路径        style: `&lt;style&gt;    .content &#123;        background: #FF4A44;        padding-bottom: 67px;    &#125;&lt;/style&gt;        `,        script: &#x27;&#x27;,        width: 500,        imgList: [            &#123;                url: &#x27;xxxxxxxx.png&#x27;,                alt: &#x27;邀请企业福利介绍&#x27;,            &#125;        ]    &#125;];pageRouter.forEach(router =&gt; &#123;    let filePath = outFileBasePath + router.fileName;    let fileContent = `&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;&lt;link rel=&quot;icon&quot; href=&quot;./favicon.ico&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&lt;title&gt;$&#123;router.title || &#x27;页面标题&#x27;&#125;&lt;/title&gt;&lt;style&gt;    * &#123;        margin: 0;        padding: 0;        overflow-x: hidden;        -ms-overflow-style: none;        overflow: -moz-scrollbars-none;    &#125;    *::-webkit-scrollbar &#123;        display: none;    &#125;    .content &#123;        width: 100vw;        min-height: 100vh;        background: #ffffff;        display: flex;        justify-content: flex-start;        flex-direction: column;        align-items: center;    &#125;    #mask &#123;        position: fixed;        top: 0;        left: 0;        right: 0;        bottom: 0;        z-index: 1;        background-color: #ffffff;        display: flex;        align-items: center;        justify-content: center;    &#125;    .loading &#123;        position: relative;        width: 30px;        height: 30px;        border: 2px solid rgba(0, 0, 0, 0.2);        border-left-color: #000;        border-radius: 100%;        animation: circle infinite 0.75s linear;    &#125;    @keyframes circle &#123;        0% &#123;            transform: rotate(0);        &#125;        100% &#123;            transform: rotate(360deg);        &#125;    &#125;&lt;/style&gt;$&#123;router.style&#125;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;content&quot;&gt;        $&#123;router.imgList.map(item =&gt; &#123;    return `&lt;img src=&quot;&quot; alt=&quot;$&#123;item.alt&#125;&quot;&gt;`&#125;).join(&#x27;&#x27;)&#125;    &lt;/div&gt;    &lt;div id=&quot;mask&quot;&gt;        &lt;div class=&quot;loading&quot;&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;script&gt;        let flag = 0;        let imgList = $&#123;JSON.stringify(router.imgList)&#125;;        let imgs = document.querySelectorAll(&#x27;.content img&#x27;);        let mask = document.querySelector(&#x27;#mask&#x27;)        imgs.forEach((e, i) =&gt; &#123;            let url = imgList[i].url + &#x27;?&#x27; + new Date().getTime();            e.src = url;            e.onload = function () &#123;                flag++;                if(flag === $&#123;router.imgList.length&#125;)&#123;                    handleImgWidth();                    window.addEventListener(&quot;resize&quot;, handleImgWidth);                    mask.style.display = &#x27;none&#x27;                &#125;            &#125;        &#125;)        function handleImgWidth() &#123;            let imgArr = document.querySelectorAll(&#x27;.content img&#x27;);            let clientWidth = document.querySelector(&#x27;.content&#x27;).clientWidth;            if (clientWidth &gt; 750) &#123;                for (let i = 0; i &lt; imgArr.length; i++) &#123;                    imgArr[i].style.width = &#x27;$&#123;router.width&#125;px&#x27;                &#125;            &#125; else &#123;                for (let i = 0; i &lt; imgArr.length; i++) &#123;                    imgArr[i].style.width = &#x27;100vw&#x27;                &#125;            &#125;        &#125;    &lt;/script&gt;    $&#123;router.script&#125;&lt;/body&gt;&lt;/html&gt;    `    mkdir(filePath + &#x27;/index.html&#x27;, fileContent)&#125;);function mkdir(filePath, data) &#123;    const arr = filePath.split(&#x27;/&#x27;);    let dir = arr[0];    for (let i = 1; i &lt; arr.length; i++) &#123;        if (dir &amp;&amp; !dirCache[dir] &amp;&amp; !fs.existsSync(dir)) &#123;            dirCache[dir] = true;            fs.mkdirSync(dir);        &#125;        dir = dir + &#x27;/&#x27; + arr[i];    &#125;    fs.writeFileSync(filePath, data, (err) =&gt; &#123;        console.log(err)    &#125;)&#125;\n$ &quot;build&quot;: &quot;node server/statusPage.js &amp;&amp; cross-env BASE_URL=&#x27;https://www.xxxxx.cn&#x27; nuxt build &quot;,\n","categories":[],"tags":[]},{"title":"包管理器命令","url":"/posts/187a3295.html","content":"记录一下各种开发中能够用到的工具命令,方便快速查询到一些常用命令\nyarn设置包下载源：yarn config set npmRegistryServer查看当前包下载源：yarn config get registry自动安装最新版本，会覆盖指定版本号：yarn add [package]一次性添加多个包：yarn add [package] [package] [package]添加指定版本的包：yarn add [package]@[version]安装某个tag：yarn add [package]@[tag]添加到devDependencies：–dev，-D添加到peerDependencies：–peer， -P添加到optionalDependencies：–optional，-O升级到最新版本：yarn upgrade [package]升级到指定版本：yarn upgrade [package]@[version]升级到指定tag：yarn upgrade [package]@[tag]移除包：yarn remove [package]安装所有依赖： yarn，yarn install安装一个包的单一版本：yarn install –flat强制重新下载所有包：yarn install –force只安装生产环境依赖：yarn install –production可以用来查看某个模块的最新版本信息：yarn info [package]列出已缓存的每个包：yarn cache list返回全局缓存位置：yarn cache dir清除缓存：yarn cache clean \nyrmyrm 是一个 yarn源管理器，可以快速地在源间切换查看已有源：yrm ls使用xxx镜像源： yrm use xxx增加一个源：yrm add &lt;源名称&gt; &lt;源地址&gt;删除源: yrm del &lt;源名称&gt;测试xx镜像源访问速度：yrm test taobao查看npm当前镜像源：npm config get registry查看yarn当前镜像源：yarn config get registry \nnpm、cnpm设置包下载源：npm config set registry获取包下载源：npm config get registry安装所有依赖: npm install，npm i安装到全局目录里：-g，–global添加到dependencies：-S，–save添加到devDependencies-D，–save-dev卸载依赖，不卸载package.json的对应信息：npm uninstall [package]卸载全局模块：npm uninstall [package] -g卸载依赖，不卸载package.json中的dependencies对应信息：npm uninstall [package] –save卸载依赖，同时package.json中的devDependencies对应信息：npm uninstall [package] –save-dev更新最新版本:npm update [package]更新到指定版本号:npm update [package]@[version]更新到最后一个新版本:npm install [package]@latest查看项目中模块所在的目录：npm root查看全局安装的模块所在目录：npm root -g查看本地已安装模块的清单列表:npm list， npm ls查看某个包对于各种包的依赖关系：npm view [version] dependencies查看[package]最新的版本号：npm view [package] version查看所有[package]历史版本号：npm view [package] versions查看最新的[package]版本的信息：npm view [package]查看[package]的详细信息：npm info [package]查看本地已安装的[package]的详细信息：npm list [package] ，npm ls [package] 查看[package]包的来源地址：npm view [package] repository.url清除npm的缓存：npm cache clean清除项目中没有被使用的包：npm prune检查模块是否已经过时：npm outdated会打开默认浏览器跳转到github中[package]的页面：npm repo [package]会打开默认浏览器跳转到github中jquery的README.MD文件信息：npm docs [package]会打开默认浏览器跳转到github中jquery的主页：npm home [package]\nnrmnrm can help you easy and fast switch between different npm registries（nrm可以帮助您在不同的npm镜像源之间轻松快速地切换）列出所有源： nrm ls查看当前源：nrm current使用某个源：nrm use &lt;源名称&gt;添加一个源：nrm add &lt;源名称&gt; &lt;源地址&gt;删除一个源：nrm del &lt;源名称&gt;  nrm查看更多指令\npnpmpnpm也称高性能npm,相比npm、yarn优势在于节省磁盘空间并提升安装速度。安装依赖：pnpm install xxx&#x2F;pnpm i xxx设置包下载源：pnpm config set registry获取包下载源：pnpm config get registry安装依赖到dependencies:pnpm add安装依赖到devDependencies：pnpm add -D更新依赖包：pnpm update [package]，pnpm up [package]\t删除依赖包：pnpm remove [package]所有命令查询文档：pnpm中文文档-CLI命令\nnvm安装指定版本node：nvm install vx.x.x安装最新node：nvm install stable设置node默认版：nvm alias default [node版本号]删除指定版本node：nvm uninstall vx.x.x查看所有已安装版本： nvm ls，nvm list列出所以远程服务器的版本：nvm ls-remote显示当前的版本：nvm current给不同的版本号添加别名：nvm alias删除已定义的别名：nvm unalias在当前版本node下，重新全局安装指定版本号的npm包：nvm reinstall-packages查看当前版本： nvm -vnvm官方文档\nwebpack\nvite\n","categories":[],"tags":[]}]