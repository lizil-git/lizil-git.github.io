[{"title":"自动创建html","url":"/posts/fd390730.html","content":"直接上代码.这里主要是展示一种思想,将功能近乎相同的小页面抽离为一种配置即可完成的东西,防止自己做无用代码\nconst fs = require(&#x27;fs&#x27;);const path = require(&#x27;path&#x27;);const outFileBasePath = path.join(__dirname, &#x27;../static&#x27;);const dirCache = &#123;&#125;;let pageRouter = [    &#123;        title: &#x27;&#x27;,        description: &#x27;&#x27;,        fileName: &#x27;/introduce/payroll_calculate_incomeTax&#x27;, // 路径        style: &#x27;&#x27;,        script: &#x27;&#x27;,        width: 750,        imgList: [            &#123;                url: &#x27;xxxxxx.png&#x27;,                alt: &#x27;产品介绍图&#x27;,            &#125;        ]    &#125;,    &#123;        title: &#x27;邀请企业，赚大额现金&#x27;,        description: &#x27;&#x27;,        fileName: &#x27;/invitationFriend&#x27;, // 路径        style: `&lt;style&gt;    .content &#123;        background: #FF4A44;        padding-bottom: 67px;    &#125;&lt;/style&gt;        `,        script: &#x27;&#x27;,        width: 500,        imgList: [            &#123;                url: &#x27;xxxxxxxx.png&#x27;,                alt: &#x27;邀请企业福利介绍&#x27;,            &#125;        ]    &#125;];pageRouter.forEach(router =&gt; &#123;    let filePath = outFileBasePath + router.fileName;    let fileContent = `&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;&lt;link rel=&quot;icon&quot; href=&quot;./favicon.ico&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&lt;title&gt;$&#123;router.title || &#x27;页面标题&#x27;&#125;&lt;/title&gt;&lt;style&gt;    * &#123;        margin: 0;        padding: 0;        overflow-x: hidden;        -ms-overflow-style: none;        overflow: -moz-scrollbars-none;    &#125;    *::-webkit-scrollbar &#123;        display: none;    &#125;    .content &#123;        width: 100vw;        min-height: 100vh;        background: #ffffff;        display: flex;        justify-content: flex-start;        flex-direction: column;        align-items: center;    &#125;    #mask &#123;        position: fixed;        top: 0;        left: 0;        right: 0;        bottom: 0;        z-index: 1;        background-color: #ffffff;        display: flex;        align-items: center;        justify-content: center;    &#125;    .loading &#123;        position: relative;        width: 30px;        height: 30px;        border: 2px solid rgba(0, 0, 0, 0.2);        border-left-color: #000;        border-radius: 100%;        animation: circle infinite 0.75s linear;    &#125;    @keyframes circle &#123;        0% &#123;            transform: rotate(0);        &#125;        100% &#123;            transform: rotate(360deg);        &#125;    &#125;&lt;/style&gt;$&#123;router.style&#125;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;content&quot;&gt;        $&#123;router.imgList.map(item =&gt; &#123;    return `&lt;img src=&quot;&quot; alt=&quot;$&#123;item.alt&#125;&quot;&gt;`&#125;).join(&#x27;&#x27;)&#125;    &lt;/div&gt;    &lt;div id=&quot;mask&quot;&gt;        &lt;div class=&quot;loading&quot;&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;script&gt;        let flag = 0;        let imgList = $&#123;JSON.stringify(router.imgList)&#125;;        let imgs = document.querySelectorAll(&#x27;.content img&#x27;);        let mask = document.querySelector(&#x27;#mask&#x27;)        imgs.forEach((e, i) =&gt; &#123;            let url = imgList[i].url + &#x27;?&#x27; + new Date().getTime();            e.src = url;            e.onload = function () &#123;                flag++;                if(flag === $&#123;router.imgList.length&#125;)&#123;                    handleImgWidth();                    window.addEventListener(&quot;resize&quot;, handleImgWidth);                    mask.style.display = &#x27;none&#x27;                &#125;            &#125;        &#125;)        function handleImgWidth() &#123;            let imgArr = document.querySelectorAll(&#x27;.content img&#x27;);            let clientWidth = document.querySelector(&#x27;.content&#x27;).clientWidth;            if (clientWidth &gt; 750) &#123;                for (let i = 0; i &lt; imgArr.length; i++) &#123;                    imgArr[i].style.width = &#x27;$&#123;router.width&#125;px&#x27;                &#125;            &#125; else &#123;                for (let i = 0; i &lt; imgArr.length; i++) &#123;                    imgArr[i].style.width = &#x27;100vw&#x27;                &#125;            &#125;        &#125;    &lt;/script&gt;    $&#123;router.script&#125;&lt;/body&gt;&lt;/html&gt;    `    mkdir(filePath + &#x27;/index.html&#x27;, fileContent)&#125;);function mkdir(filePath, data) &#123;    const arr = filePath.split(&#x27;/&#x27;);    let dir = arr[0];    for (let i = 1; i &lt; arr.length; i++) &#123;        if (dir &amp;&amp; !dirCache[dir] &amp;&amp; !fs.existsSync(dir)) &#123;            dirCache[dir] = true;            fs.mkdirSync(dir);        &#125;        dir = dir + &#x27;/&#x27; + arr[i];    &#125;    fs.writeFileSync(filePath, data, (err) =&gt; &#123;        console.log(err)    &#125;)&#125;\n$ &quot;build&quot;: &quot;node server/statusPage.js &amp;&amp; cross-env BASE_URL=&#x27;https://www.xxxxx.cn&#x27; nuxt build &quot;,\n","categories":[],"tags":[]},{"title":"包管理器命令","url":"/posts/187a3295.html","content":"记录一下各种开发中能够用到的工具命令,方便快速查询到一些常用命令\nyarn设置包下载源：yarn config set npmRegistryServer查看当前包下载源：yarn config get registry自动安装最新版本，会覆盖指定版本号：yarn add [package]一次性添加多个包：yarn add [package] [package] [package]添加指定版本的包：yarn add [package]@[version]安装某个tag：yarn add [package]@[tag]添加到devDependencies：–dev，-D添加到peerDependencies：–peer， -P添加到optionalDependencies：–optional，-O升级到最新版本：yarn upgrade [package]升级到指定版本：yarn upgrade [package]@[version]升级到指定tag：yarn upgrade [package]@[tag]移除包：yarn remove [package]安装所有依赖： yarn，yarn install安装一个包的单一版本：yarn install –flat强制重新下载所有包：yarn install –force只安装生产环境依赖：yarn install –production可以用来查看某个模块的最新版本信息：yarn info [package]列出已缓存的每个包：yarn cache list返回全局缓存位置：yarn cache dir清除缓存：yarn cache clean \nyrmyrm 是一个 yarn源管理器，可以快速地在源间切换查看已有源：yrm ls使用xxx镜像源： yrm use xxx增加一个源：yrm add &lt;源名称&gt; &lt;源地址&gt;删除源: yrm del &lt;源名称&gt;测试xx镜像源访问速度：yrm test taobao查看npm当前镜像源：npm config get registry查看yarn当前镜像源：yarn config get registry \nnpm、cnpm设置包下载源：npm config set registry获取包下载源：npm config get registry安装所有依赖: npm install，npm i安装到全局目录里：-g，–global添加到dependencies：-S，–save添加到devDependencies-D，–save-dev卸载依赖，不卸载package.json的对应信息：npm uninstall [package]卸载全局模块：npm uninstall [package] -g卸载依赖，不卸载package.json中的dependencies对应信息：npm uninstall [package] –save卸载依赖，同时package.json中的devDependencies对应信息：npm uninstall [package] –save-dev更新最新版本:npm update [package]更新到指定版本号:npm update [package]@[version]更新到最后一个新版本:npm install [package]@latest查看项目中模块所在的目录：npm root查看全局安装的模块所在目录：npm root -g查看本地已安装模块的清单列表:npm list， npm ls查看某个包对于各种包的依赖关系：npm view [version] dependencies查看[package]最新的版本号：npm view [package] version查看所有[package]历史版本号：npm view [package] versions查看最新的[package]版本的信息：npm view [package]查看[package]的详细信息：npm info [package]查看本地已安装的[package]的详细信息：npm list [package] ，npm ls [package] 查看[package]包的来源地址：npm view [package] repository.url清除npm的缓存：npm cache clean清除项目中没有被使用的包：npm prune检查模块是否已经过时：npm outdated会打开默认浏览器跳转到github中[package]的页面：npm repo [package]会打开默认浏览器跳转到github中jquery的README.MD文件信息：npm docs [package]会打开默认浏览器跳转到github中jquery的主页：npm home [package]\nnrmnrm can help you easy and fast switch between different npm registries（nrm可以帮助您在不同的npm镜像源之间轻松快速地切换）列出所有源： nrm ls查看当前源：nrm current使用某个源：nrm use &lt;源名称&gt;添加一个源：nrm add &lt;源名称&gt; &lt;源地址&gt;删除一个源：nrm del &lt;源名称&gt;  nrm查看更多指令\npnpmpnpm也称高性能npm,相比npm、yarn优势在于节省磁盘空间并提升安装速度。安装依赖：pnpm install xxx&#x2F;pnpm i xxx设置包下载源：pnpm config set registry获取包下载源：pnpm config get registry安装依赖到dependencies:pnpm add安装依赖到devDependencies：pnpm add -D更新依赖包：pnpm update [package]，pnpm up [package]\t删除依赖包：pnpm remove [package]所有命令查询文档：pnpm中文文档-CLI命令\nnvm安装指定版本node：nvm install vx.x.x安装最新node：nvm install stable设置node默认版：nvm alias default [node版本号]删除指定版本node：nvm uninstall vx.x.x查看所有已安装版本： nvm ls，nvm list列出所以远程服务器的版本：nvm ls-remote显示当前的版本：nvm current给不同的版本号添加别名：nvm alias删除已定义的别名：nvm unalias在当前版本node下，重新全局安装指定版本号的npm包：nvm reinstall-packages查看当前版本： nvm -vnvm官方文档\nwebpack\nvite\n","categories":[],"tags":[]}]